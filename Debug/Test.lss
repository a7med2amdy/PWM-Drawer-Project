
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000406  00800060  000031b6  0000324a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800466  00800466  00003650  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  00003650  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000127a  00000000  00000000  00005990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000093a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a72d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bdba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_1>
       8:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_2>
       c:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__vector_10>
      2c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 14 	call	0x287c	; 0x287c <main>
      8a:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e7       	ldi	r22, 0x7E	; 126
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 57       	subi	r30, 0x7A	; 122
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_voidInit>:

static void (*ptrToFunc_ovf)(void)=NULL;
static void (*ptrToFunc_ctc)(void)=NULL;

void TIMER0_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*set fast PWM mode */
	SET_BIT(TIMER_TCCR0,TMR_WGM00);
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	SET_BIT(TIMER_TCCR0,TMR_WGM01);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	88 60       	ori	r24, 0x08	; 8
     e50:	8c 93       	st	X, r24
	
	/*NON INVERTING*/
	CLR_BIT(TIMER_TCCR0,TMR_COM00);
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7e       	andi	r24, 0xEF	; 239
     e5e:	8c 93       	st	X, r24
	SET_BIT(TIMER_TCCR0,TMR_COM01);
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 62       	ori	r24, 0x20	; 32
     e6c:	8c 93       	st	X, r24
		
		/*prescaler*/
		TIMER_TCCR0 &=0b11111000;
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	88 7f       	andi	r24, 0xF8	; 248
     e7a:	8c 93       	st	X, r24
		TIMER_TCCR0 |=2;
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	8c 93       	st	X, r24
		
	/*compare match value to 32us on time*/
	TIMER_OCR0=64;
     e8a:	ec e5       	ldi	r30, 0x5C	; 92
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 e4       	ldi	r24, 0x40	; 64
     e90:	80 83       	st	Z, r24
	
}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <TIMER0_setCallBack>:


u8 TIMER0_setCallBack(u8 copy_u8IntID,void (*ptrToFunc)(void))
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <TIMER0_setCallBack+0x6>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <TIMER0_setCallBack+0x8>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	8a 83       	std	Y+2, r24	; 0x02
     ea6:	7c 83       	std	Y+4, r23	; 0x04
     ea8:	6b 83       	std	Y+3, r22	; 0x03

	u8 Error_state=OK;
     eaa:	19 82       	std	Y+1, r1	; 0x01

	if(ptrToFunc != NULL)
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	b9 f0       	breq	.+46     	; 0xee2 <TIMER0_setCallBack+0x4a>
	{
		if(copy_u8IntID == TIMER_OVF_INT)
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	88 23       	and	r24, r24
     eb8:	39 f4       	brne	.+14     	; 0xec8 <TIMER0_setCallBack+0x30>
		{
			ptrToFunc_ovf=ptrToFunc;
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	90 93 67 04 	sts	0x0467, r25
     ec2:	80 93 66 04 	sts	0x0466, r24
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <TIMER0_setCallBack+0x4e>
		}
		else if(copy_u8IntID==TIMER_CTC_INT)
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	39 f4       	brne	.+14     	; 0xedc <TIMER0_setCallBack+0x44>
		{
			ptrToFunc_ctc=ptrToFunc;
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	90 93 69 04 	sts	0x0469, r25
     ed6:	80 93 68 04 	sts	0x0468, r24
     eda:	05 c0       	rjmp	.+10     	; 0xee6 <TIMER0_setCallBack+0x4e>
		}
		else
		{
			Error_state=NOK;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <TIMER0_setCallBack+0x4e>
		
		
	}
	else
	{
		Error_state=NULL_POINTER;
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Error_state;
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	/*Set normal mode*/
	CLR_BIT(TIMER1_TCCR1A,TIMER1_COM1A0);
     efe:	af e4       	ldi	r26, 0x4F	; 79
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ef e4       	ldi	r30, 0x4F	; 79
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 7b       	andi	r24, 0xBF	; 191
     f0a:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1A,TIMER1_COM1A1);
     f0c:	af e4       	ldi	r26, 0x4F	; 79
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ef e4       	ldi	r30, 0x4F	; 79
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8f 77       	andi	r24, 0x7F	; 127
     f18:	8c 93       	st	X, r24
	
	/*Set waveform generation mode normal */
	CLR_BIT(TIMER1_TCCR1A,TIMER1_WGM10);
     f1a:	af e4       	ldi	r26, 0x4F	; 79
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ef e4       	ldi	r30, 0x4F	; 79
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8e 7f       	andi	r24, 0xFE	; 254
     f26:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1A,TIMER1_WGM11);
     f28:	af e4       	ldi	r26, 0x4F	; 79
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ef e4       	ldi	r30, 0x4F	; 79
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1B,TIMER1_WGM12);
     f36:	ae e4       	ldi	r26, 0x4E	; 78
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ee e4       	ldi	r30, 0x4E	; 78
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	87 7f       	andi	r24, 0xF7	; 247
     f42:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1B,TIMER1_WGM13);
     f44:	ae e4       	ldi	r26, 0x4E	; 78
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	ee e4       	ldi	r30, 0x4E	; 78
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7e       	andi	r24, 0xEF	; 239
     f50:	8c 93       	st	X, r24
	
	/*prescaler :Division by 8*/
	CLR_BIT(TIMER1_TCCR1B,TIMER1_CS10);
     f52:	ae e4       	ldi	r26, 0x4E	; 78
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ee e4       	ldi	r30, 0x4E	; 78
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B,TIMER1_CS11);
     f5e:	ae e4       	ldi	r26, 0x4E	; 78
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ee e4       	ldi	r30, 0x4E	; 78
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	82 60       	ori	r24, 0x02	; 2
     f6a:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1B,TIMER1_CS12);
     f6c:	ae e4       	ldi	r26, 0x4E	; 78
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ee e4       	ldi	r30, 0x4E	; 78
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8b 7f       	andi	r24, 0xFB	; 251
     f78:	8c 93       	st	X, r24
	
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(u16 copy_u16TimerValue)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <TIMER1_voidSetTimerValue+0x6>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_TCNT1=copy_u16TimerValue;
     f8e:	ec e4       	ldi	r30, 0x4C	; 76
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <TIMER1_voidgetTimerValue>:
u16 TIMER1_voidgetTimerValue(void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
	return TIMER1_TCNT1;
     fac:	ec e4       	ldi	r30, 0x4C	; 76
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
}
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TIMER1_voidSetCompareValueChannelA>:

void TIMER1_voidSetCompareValueChannelA(u16 copy_u16CompareValue)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <TIMER1_voidSetCompareValueChannelA+0x6>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
	/*set compare value*/
	TIMER1_OCR1A=copy_u16CompareValue;
     fc8:	ea e4       	ldi	r30, 0x4A	; 74
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <__vector_10>:


/*ISR CTC MODE*/
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     fde:	1f 92       	push	r1
     fe0:	0f 92       	push	r0
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
ptrToFunc_ctc();
    1008:	e0 91 68 04 	lds	r30, 0x0468
    100c:	f0 91 69 04 	lds	r31, 0x0469
    1010:	09 95       	icall
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_11>:


/*ISR OVF MODE*/
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	2f 93       	push	r18
    1044:	3f 93       	push	r19
    1046:	4f 93       	push	r20
    1048:	5f 93       	push	r21
    104a:	6f 93       	push	r22
    104c:	7f 93       	push	r23
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	af 93       	push	r26
    1054:	bf 93       	push	r27
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	ptrToFunc_ovf();
    1062:	e0 91 66 04 	lds	r30, 0x0466
    1066:	f0 91 67 04 	lds	r31, 0x0467
    106a:	09 95       	icall
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <GIE_vidEnable>:
 */

#define SREG 		*((volatile unsigned char*)0x5F)

void GIE_vidEnable(void)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);
    109a:	af e5       	ldi	r26, 0x5F	; 95
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ef e5       	ldi	r30, 0x5F	; 95
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 68       	ori	r24, 0x80	; 128
    10a6:	8c 93       	st	X, r24
//	asm("sei");
//volatile __asm("SEI");
//	__asm__("sei");
}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <GIE_vidDisable>:

void GIE_vidDisable(void)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
	//volatile __asm("CLI");
	SREG &=~(1<<7);
    10b6:	af e5       	ldi	r26, 0x5F	; 95
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ef e5       	ldi	r30, 0x5F	; 95
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8f 77       	andi	r24, 0x7F	; 127
    10c2:	8c 93       	st	X, r24
}
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <EXTI_voidPeripheralINTEnable>:
void (*ptr_INT1)(void)=NULL;
void (*ptr_INT2)(void)=NULL;


void EXTI_voidPeripheralINTEnable(u8 copy_u8IntID,u8 copy_u8SenseMode)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	2a 97       	sbiw	r28, 0x0a	; 10
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	6a 83       	std	Y+2, r22	; 0x02
	/*enable pie*/
	SET_BIT(EXTI_GICR,copy_u8IntID);
    10e2:	ab e5       	ldi	r26, 0x5B	; 91
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	eb e5       	ldi	r30, 0x5B	; 91
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <EXTI_voidPeripheralINTEnable+0x34>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	2a 95       	dec	r18
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <EXTI_voidPeripheralINTEnable+0x30>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24

	switch (copy_u8IntID)
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3a 87       	std	Y+10, r19	; 0x0a
    110e:	29 87       	std	Y+9, r18	; 0x09
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	9a 85       	ldd	r25, Y+10	; 0x0a
    1114:	86 30       	cpi	r24, 0x06	; 6
    1116:	91 05       	cpc	r25, r1
    1118:	69 f0       	breq	.+26     	; 0x1134 <EXTI_voidPeripheralINTEnable+0x6a>
    111a:	29 85       	ldd	r18, Y+9	; 0x09
    111c:	3a 85       	ldd	r19, Y+10	; 0x0a
    111e:	27 30       	cpi	r18, 0x07	; 7
    1120:	31 05       	cpc	r19, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <EXTI_voidPeripheralINTEnable+0x5c>
    1124:	62 c0       	rjmp	.+196    	; 0x11ea <EXTI_voidPeripheralINTEnable+0x120>
    1126:	89 85       	ldd	r24, Y+9	; 0x09
    1128:	9a 85       	ldd	r25, Y+10	; 0x0a
    112a:	85 30       	cpi	r24, 0x05	; 5
    112c:	91 05       	cpc	r25, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <EXTI_voidPeripheralINTEnable+0x68>
    1130:	b7 c0       	rjmp	.+366    	; 0x12a0 <EXTI_voidPeripheralINTEnable+0x1d6>
    1132:	d5 c0       	rjmp	.+426    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
	{
		case EXTI_INT0:
		
		switch(copy_u8SenseMode)
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	38 87       	std	Y+8, r19	; 0x08
    113c:	2f 83       	std	Y+7, r18	; 0x07
    113e:	8f 81       	ldd	r24, Y+7	; 0x07
    1140:	98 85       	ldd	r25, Y+8	; 0x08
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	21 f1       	breq	.+72     	; 0x1190 <EXTI_voidPeripheralINTEnable+0xc6>
    1148:	2f 81       	ldd	r18, Y+7	; 0x07
    114a:	38 85       	ldd	r19, Y+8	; 0x08
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <EXTI_voidPeripheralINTEnable+0x92>
    1152:	8f 81       	ldd	r24, Y+7	; 0x07
    1154:	98 85       	ldd	r25, Y+8	; 0x08
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	61 f0       	breq	.+24     	; 0x1172 <EXTI_voidPeripheralINTEnable+0xa8>
    115a:	c1 c0       	rjmp	.+386    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
    115c:	2f 81       	ldd	r18, Y+7	; 0x07
    115e:	38 85       	ldd	r19, Y+8	; 0x08
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	21 f1       	breq	.+72     	; 0x11ae <EXTI_voidPeripheralINTEnable+0xe4>
    1166:	8f 81       	ldd	r24, Y+7	; 0x07
    1168:	98 85       	ldd	r25, Y+8	; 0x08
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	71 f1       	breq	.+92     	; 0x11cc <EXTI_voidPeripheralINTEnable+0x102>
    1170:	b6 c0       	rjmp	.+364    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
		{
			case EXTI_SENSE_LOW_LEVEL:  CLR_BIT(EXTI_MCUCR,ISC00);   CLR_BIT(EXTI_MCUCR,ISC01);    break;
    1172:	a5 e5       	ldi	r26, 0x55	; 85
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e5       	ldi	r30, 0x55	; 85
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8e 7f       	andi	r24, 0xFE	; 254
    117e:	8c 93       	st	X, r24
    1180:	a5 e5       	ldi	r26, 0x55	; 85
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e5 e5       	ldi	r30, 0x55	; 85
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8d 7f       	andi	r24, 0xFD	; 253
    118c:	8c 93       	st	X, r24
    118e:	a7 c0       	rjmp	.+334    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
			case EXTI_SENSE_FALLING_EDGE:CLR_BIT(EXTI_MCUCR,ISC00); SET_BIT(EXTI_MCUCR,ISC01);
    1190:	a5 e5       	ldi	r26, 0x55	; 85
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e5 e5       	ldi	r30, 0x55	; 85
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8e 7f       	andi	r24, 0xFE	; 254
    119c:	8c 93       	st	X, r24
    119e:	a5 e5       	ldi	r26, 0x55	; 85
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 e5       	ldi	r30, 0x55	; 85
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	82 60       	ori	r24, 0x02	; 2
    11aa:	8c 93       	st	X, r24
    11ac:	98 c0       	rjmp	.+304    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
			
			break;
			case EXTI_SENSE_RISING_EGDE:
			SET_BIT(EXTI_MCUCR,ISC00);
    11ae:	a5 e5       	ldi	r26, 0x55	; 85
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e5 e5       	ldi	r30, 0x55	; 85
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR,ISC01);
    11bc:	a5 e5       	ldi	r26, 0x55	; 85
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e5 e5       	ldi	r30, 0x55	; 85
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	82 60       	ori	r24, 0x02	; 2
    11c8:	8c 93       	st	X, r24
    11ca:	89 c0       	rjmp	.+274    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
			
			break;
			case EXTI_SENSE_ON_CHANGE:
			SET_BIT(EXTI_MCUCR,ISC00);
    11cc:	a5 e5       	ldi	r26, 0x55	; 85
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e5 e5       	ldi	r30, 0x55	; 85
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR,ISC01);
    11da:	a5 e5       	ldi	r26, 0x55	; 85
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e5       	ldi	r30, 0x55	; 85
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8d 7f       	andi	r24, 0xFD	; 253
    11e6:	8c 93       	st	X, r24
    11e8:	7a c0       	rjmp	.+244    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
		
		case EXTI_INT1:
		

		
		switch(copy_u8SenseMode)
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	3e 83       	std	Y+6, r19	; 0x06
    11f2:	2d 83       	std	Y+5, r18	; 0x05
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	21 f1       	breq	.+72     	; 0x1246 <EXTI_voidPeripheralINTEnable+0x17c>
    11fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1200:	3e 81       	ldd	r19, Y+6	; 0x06
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	2c f4       	brge	.+10     	; 0x1212 <EXTI_voidPeripheralINTEnable+0x148>
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	61 f0       	breq	.+24     	; 0x1228 <EXTI_voidPeripheralINTEnable+0x15e>
    1210:	66 c0       	rjmp	.+204    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
    1212:	2d 81       	ldd	r18, Y+5	; 0x05
    1214:	3e 81       	ldd	r19, Y+6	; 0x06
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	21 f1       	breq	.+72     	; 0x1264 <EXTI_voidPeripheralINTEnable+0x19a>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	91 05       	cpc	r25, r1
    1224:	71 f1       	breq	.+92     	; 0x1282 <EXTI_voidPeripheralINTEnable+0x1b8>
    1226:	5b c0       	rjmp	.+182    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
		{
			case EXTI_SENSE_LOW_LEVEL:
			
			CLR_BIT(EXTI_MCUCR,ISC10);
    1228:	a5 e5       	ldi	r26, 0x55	; 85
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e5       	ldi	r30, 0x55	; 85
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8b 7f       	andi	r24, 0xFB	; 251
    1234:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR,ISC11);
    1236:	a5 e5       	ldi	r26, 0x55	; 85
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e5       	ldi	r30, 0x55	; 85
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	87 7f       	andi	r24, 0xF7	; 247
    1242:	8c 93       	st	X, r24
    1244:	4c c0       	rjmp	.+152    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
			
			break;
			case EXTI_SENSE_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCR,ISC10);
    1246:	a5 e5       	ldi	r26, 0x55	; 85
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e5 e5       	ldi	r30, 0x55	; 85
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8b 7f       	andi	r24, 0xFB	; 251
    1252:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR,ISC11);
    1254:	a5 e5       	ldi	r26, 0x55	; 85
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e5 e5       	ldi	r30, 0x55	; 85
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	88 60       	ori	r24, 0x08	; 8
    1260:	8c 93       	st	X, r24
    1262:	3d c0       	rjmp	.+122    	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
			
			break;
			case EXTI_SENSE_RISING_EGDE:
			SET_BIT(EXTI_MCUCR,ISC10);
    1264:	a5 e5       	ldi	r26, 0x55	; 85
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e5 e5       	ldi	r30, 0x55	; 85
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	84 60       	ori	r24, 0x04	; 4
    1270:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR,ISC11);
    1272:	a5 e5       	ldi	r26, 0x55	; 85
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e5       	ldi	r30, 0x55	; 85
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	8c 93       	st	X, r24
    1280:	2e c0       	rjmp	.+92     	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
			
			break;
			case EXTI_SENSE_ON_CHANGE:
			SET_BIT(EXTI_MCUCR,ISC10);
    1282:	a5 e5       	ldi	r26, 0x55	; 85
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e5       	ldi	r30, 0x55	; 85
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	84 60       	ori	r24, 0x04	; 4
    128e:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR,ISC11);
    1290:	a5 e5       	ldi	r26, 0x55	; 85
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e5 e5       	ldi	r30, 0x55	; 85
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	87 7f       	andi	r24, 0xF7	; 247
    129c:	8c 93       	st	X, r24
    129e:	1f c0       	rjmp	.+62     	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
		}

		break;
		case EXTI_INT2:
		
		switch(copy_u8SenseMode)
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3c 83       	std	Y+4, r19	; 0x04
    12a8:	2b 83       	std	Y+3, r18	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	91 05       	cpc	r25, r1
    12b2:	31 f0       	breq	.+12     	; 0x12c0 <EXTI_voidPeripheralINTEnable+0x1f6>
    12b4:	2b 81       	ldd	r18, Y+3	; 0x03
    12b6:	3c 81       	ldd	r19, Y+4	; 0x04
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	49 f0       	breq	.+18     	; 0x12d0 <EXTI_voidPeripheralINTEnable+0x206>
    12be:	0f c0       	rjmp	.+30     	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
		{
			
			case EXTI_SENSE_FALLING_EDGE:
			CLR_BIT(EXTI_MCUCSR,ISC2);
    12c0:	a4 e5       	ldi	r26, 0x54	; 84
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e4 e5       	ldi	r30, 0x54	; 84
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 7b       	andi	r24, 0xBF	; 191
    12cc:	8c 93       	st	X, r24
    12ce:	07 c0       	rjmp	.+14     	; 0x12de <EXTI_voidPeripheralINTEnable+0x214>
			break;
			case EXTI_SENSE_RISING_EGDE:
			SET_BIT(EXTI_MCUCSR,ISC2);
    12d0:	a4 e5       	ldi	r26, 0x54	; 84
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e4 e5       	ldi	r30, 0x54	; 84
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 64       	ori	r24, 0x40	; 64
    12dc:	8c 93       	st	X, r24
		default:/*error*/ break;
	}
	


}
    12de:	2a 96       	adiw	r28, 0x0a	; 10
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <EXTI_voidPeripheralINTDisbale>:
void EXTI_voidPeripheralINTDisbale(u8 copy_u8IntID)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(EXTI_GICR,copy_u8IntID);
    12fc:	ab e5       	ldi	r26, 0x5B	; 91
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	eb e5       	ldi	r30, 0x5B	; 91
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <EXTI_voidPeripheralINTDisbale+0x2a>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <EXTI_voidPeripheralINTDisbale+0x26>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
}
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <EXTI_callBackFunc_INT0>:

void EXTI_callBackFunc_INT0(void(*ptr_func)(void))
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <EXTI_callBackFunc_INT0+0x6>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
	ptr_INT0=ptr_func;
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	90 93 6b 04 	sts	0x046B, r25
    1342:	80 93 6a 04 	sts	0x046A, r24
	
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <EXTI_callBackFunc_INT1>:

void EXTI_callBackFunc_INT1(void(*ptr_func)(void))
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <EXTI_callBackFunc_INT1+0x6>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
	ptr_INT1=ptr_func;
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	90 93 6d 04 	sts	0x046D, r25
    1366:	80 93 6c 04 	sts	0x046C, r24
	
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <EXTI_callBackFunc_INT2>:

void EXTI_callBackFunc_INT2(void(*ptr_func)(void))
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <EXTI_callBackFunc_INT2+0x6>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
	ptr_INT2=ptr_func;
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	90 93 6f 04 	sts	0x046F, r25
    138a:	80 93 6e 04 	sts	0x046E, r24
	
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <__vector_1>:

/*INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void) 
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	
	ptr_INT0();
    13c2:	e0 91 6a 04 	lds	r30, 0x046A
    13c6:	f0 91 6b 04 	lds	r31, 0x046B
    13ca:	09 95       	icall
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	7f 91       	pop	r23
    13de:	6f 91       	pop	r22
    13e0:	5f 91       	pop	r21
    13e2:	4f 91       	pop	r20
    13e4:	3f 91       	pop	r19
    13e6:	2f 91       	pop	r18
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	18 95       	reti

000013f2 <__vector_2>:
/*INT1*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62

ptr_INT1();
    141c:	e0 91 6c 04 	lds	r30, 0x046C
    1420:	f0 91 6d 04 	lds	r31, 0x046D
    1424:	09 95       	icall
}
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_3>:

/*INT2*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	2f 93       	push	r18
    1458:	3f 93       	push	r19
    145a:	4f 93       	push	r20
    145c:	5f 93       	push	r21
    145e:	6f 93       	push	r22
    1460:	7f 93       	push	r23
    1462:	8f 93       	push	r24
    1464:	9f 93       	push	r25
    1466:	af 93       	push	r26
    1468:	bf 93       	push	r27
    146a:	ef 93       	push	r30
    146c:	ff 93       	push	r31
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
ptr_INT2();
    1476:	e0 91 6e 04 	lds	r30, 0x046E
    147a:	f0 91 6f 04 	lds	r31, 0x046F
    147e:	09 95       	icall
}
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	7f 91       	pop	r23
    1492:	6f 91       	pop	r22
    1494:	5f 91       	pop	r21
    1496:	4f 91       	pop	r20
    1498:	3f 91       	pop	r19
    149a:	2f 91       	pop	r18
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	1f 90       	pop	r1
    14a4:	18 95       	reti

000014a6 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	0f 92       	push	r0
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorState = ES_NOK;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01

//10111010
//    DDRA = DIO_CONC(DIO_PA7_DIR , DIO_PA6_DIR , DIO_PA5_DIR , DIO_PA4_DIR , DIO_PA3_DIR, DIO_PA2_DIR, DIO_PA1_DIR,DIO_PA0_DIR);

    return Local_enuErrorState;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <DIO_enuSetPinDirection+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <DIO_enuSetPinDirection+0x8>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <DIO_enuSetPinDirection+0xa>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	8a 83       	std	Y+2, r24	; 0x02
    14ce:	6b 83       	std	Y+3, r22	; 0x03
    14d0:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_enuErrorState = ES_NOK;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7)
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	84 30       	cpi	r24, 0x04	; 4
    14da:	08 f0       	brcs	.+2      	; 0x14de <DIO_enuSetPinDirection+0x20>
    14dc:	d0 c0       	rjmp	.+416    	; 0x167e <DIO_enuSetPinDirection+0x1c0>
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 30       	cpi	r24, 0x08	; 8
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <DIO_enuSetPinDirection+0x28>
    14e4:	cc c0       	rjmp	.+408    	; 0x167e <DIO_enuSetPinDirection+0x1c0>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <DIO_enuSetPinDirection+0x30>
    14ec:	c8 c0       	rjmp	.+400    	; 0x167e <DIO_enuSetPinDirection+0x1c0>
            && (Copy_u8Direction <= DIO_OUTPUT))
    {
        switch(Copy_u8GroupID)
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	3e 83       	std	Y+6, r19	; 0x06
    14f6:	2d 83       	std	Y+5, r18	; 0x05
    14f8:	6d 81       	ldd	r22, Y+5	; 0x05
    14fa:	7e 81       	ldd	r23, Y+6	; 0x06
    14fc:	61 30       	cpi	r22, 0x01	; 1
    14fe:	71 05       	cpc	r23, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <DIO_enuSetPinDirection+0x46>
    1502:	41 c0       	rjmp	.+130    	; 0x1586 <DIO_enuSetPinDirection+0xc8>
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	91 05       	cpc	r25, r1
    150c:	34 f4       	brge	.+12     	; 0x151a <DIO_enuSetPinDirection+0x5c>
    150e:	2d 81       	ldd	r18, Y+5	; 0x05
    1510:	3e 81       	ldd	r19, Y+6	; 0x06
    1512:	21 15       	cp	r18, r1
    1514:	31 05       	cpc	r19, r1
    1516:	71 f0       	breq	.+28     	; 0x1534 <DIO_enuSetPinDirection+0x76>
    1518:	b0 c0       	rjmp	.+352    	; 0x167a <DIO_enuSetPinDirection+0x1bc>
    151a:	6d 81       	ldd	r22, Y+5	; 0x05
    151c:	7e 81       	ldd	r23, Y+6	; 0x06
    151e:	62 30       	cpi	r22, 0x02	; 2
    1520:	71 05       	cpc	r23, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <DIO_enuSetPinDirection+0x68>
    1524:	59 c0       	rjmp	.+178    	; 0x15d8 <DIO_enuSetPinDirection+0x11a>
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <DIO_enuSetPinDirection+0x74>
    1530:	7c c0       	rjmp	.+248    	; 0x162a <DIO_enuSetPinDirection+0x16c>
    1532:	a3 c0       	rjmp	.+326    	; 0x167a <DIO_enuSetPinDirection+0x1bc>
        {
            case DIO_GROUP_A:
                DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1534:	aa e3       	ldi	r26, 0x3A	; 58
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ea e3       	ldi	r30, 0x3A	; 58
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_enuSetPinDirection+0x92>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	2a 95       	dec	r18
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_enuSetPinDirection+0x8e>
    1554:	80 95       	com	r24
    1556:	84 23       	and	r24, r20
    1558:	8c 93       	st	X, r24
                DDRA |=  (Copy_u8Direction << Copy_u8PinID);
    155a:	aa e3       	ldi	r26, 0x3A	; 58
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ea e3       	ldi	r30, 0x3A	; 58
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	b9 01       	movw	r22, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_enuSetPinDirection+0xbc>
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	8a 95       	dec	r24
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_enuSetPinDirection+0xb8>
    157e:	cb 01       	movw	r24, r22
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	7a c0       	rjmp	.+244    	; 0x167a <DIO_enuSetPinDirection+0x1bc>
            break;

            case DIO_GROUP_B:
                DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1586:	a7 e3       	ldi	r26, 0x37	; 55
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e7 e3       	ldi	r30, 0x37	; 55
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_enuSetPinDirection+0xe4>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	2a 95       	dec	r18
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <DIO_enuSetPinDirection+0xe0>
    15a6:	80 95       	com	r24
    15a8:	84 23       	and	r24, r20
    15aa:	8c 93       	st	X, r24
                DDRB |=  (Copy_u8Direction << Copy_u8PinID);
    15ac:	a7 e3       	ldi	r26, 0x37	; 55
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e7 e3       	ldi	r30, 0x37	; 55
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	b9 01       	movw	r22, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_enuSetPinDirection+0x10e>
    15c8:	66 0f       	add	r22, r22
    15ca:	77 1f       	adc	r23, r23
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_enuSetPinDirection+0x10a>
    15d0:	cb 01       	movw	r24, r22
    15d2:	84 2b       	or	r24, r20
    15d4:	8c 93       	st	X, r24
    15d6:	51 c0       	rjmp	.+162    	; 0x167a <DIO_enuSetPinDirection+0x1bc>
            break;

            case DIO_GROUP_C:
                DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    15d8:	a4 e3       	ldi	r26, 0x34	; 52
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e4 e3       	ldi	r30, 0x34	; 52
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_enuSetPinDirection+0x136>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	2a 95       	dec	r18
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_enuSetPinDirection+0x132>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
                DDRC |=  (Copy_u8Direction << Copy_u8PinID);
    15fe:	a4 e3       	ldi	r26, 0x34	; 52
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e4 e3       	ldi	r30, 0x34	; 52
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	b9 01       	movw	r22, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_enuSetPinDirection+0x160>
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	8a 95       	dec	r24
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_enuSetPinDirection+0x15c>
    1622:	cb 01       	movw	r24, r22
    1624:	84 2b       	or	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	28 c0       	rjmp	.+80     	; 0x167a <DIO_enuSetPinDirection+0x1bc>
            break;
            
            case DIO_GROUP_D:
                DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    162a:	a1 e3       	ldi	r26, 0x31	; 49
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e1 e3       	ldi	r30, 0x31	; 49
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_enuSetPinDirection+0x188>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	2a 95       	dec	r18
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_enuSetPinDirection+0x184>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
                DDRD |=  (Copy_u8Direction << Copy_u8PinID);
    1650:	a1 e3       	ldi	r26, 0x31	; 49
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e1 e3       	ldi	r30, 0x31	; 49
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	b9 01       	movw	r22, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_enuSetPinDirection+0x1b2>
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_enuSetPinDirection+0x1ae>
    1674:	cb 01       	movw	r24, r22
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
            break;

            default:
            break;
        }
        Local_enuErrorState = ES_OK;
    167a:	19 82       	std	Y+1, r1	; 0x01
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_enuSetPinDirection+0x1c4>
    }
    else
    {
        Local_enuErrorState = ES_OUT_OF_RANGE;
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
    1682:	89 81       	ldd	r24, Y+1	; 0x01
}
    1684:	26 96       	adiw	r28, 0x06	; 6
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	29 97       	sbiw	r28, 0x09	; 9
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	8a 83       	std	Y+2, r24	; 0x02
    16ac:	6b 83       	std	Y+3, r22	; 0x03
    16ae:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_enuErrorState = ES_NOK;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	89 83       	std	Y+1, r24	; 0x01

        if ((Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7)
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	84 30       	cpi	r24, 0x04	; 4
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <DIO_enuSetPinValue+0x26>
    16ba:	df c0       	rjmp	.+446    	; 0x187a <DIO_enuSetPinValue+0x1e4>
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	88 30       	cpi	r24, 0x08	; 8
    16c0:	08 f0       	brcs	.+2      	; 0x16c4 <DIO_enuSetPinValue+0x2e>
    16c2:	db c0       	rjmp	.+438    	; 0x187a <DIO_enuSetPinValue+0x1e4>
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <DIO_enuSetPinValue+0x36>
    16ca:	d7 c0       	rjmp	.+430    	; 0x187a <DIO_enuSetPinValue+0x1e4>
            && (Copy_u8Value <= DIO_HIGH))
    {
        switch(Copy_u8GroupID)
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	39 87       	std	Y+9, r19	; 0x09
    16d4:	28 87       	std	Y+8, r18	; 0x08
    16d6:	88 85       	ldd	r24, Y+8	; 0x08
    16d8:	99 85       	ldd	r25, Y+9	; 0x09
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	91 05       	cpc	r25, r1
    16de:	09 f4       	brne	.+2      	; 0x16e2 <DIO_enuSetPinValue+0x4c>
    16e0:	44 c0       	rjmp	.+136    	; 0x176a <DIO_enuSetPinValue+0xd4>
    16e2:	e8 85       	ldd	r30, Y+8	; 0x08
    16e4:	f9 85       	ldd	r31, Y+9	; 0x09
    16e6:	e2 30       	cpi	r30, 0x02	; 2
    16e8:	f1 05       	cpc	r31, r1
    16ea:	34 f4       	brge	.+12     	; 0x16f8 <DIO_enuSetPinValue+0x62>
    16ec:	28 85       	ldd	r18, Y+8	; 0x08
    16ee:	39 85       	ldd	r19, Y+9	; 0x09
    16f0:	21 15       	cp	r18, r1
    16f2:	31 05       	cpc	r19, r1
    16f4:	71 f0       	breq	.+28     	; 0x1712 <DIO_enuSetPinValue+0x7c>
    16f6:	bf c0       	rjmp	.+382    	; 0x1876 <DIO_enuSetPinValue+0x1e0>
    16f8:	88 85       	ldd	r24, Y+8	; 0x08
    16fa:	99 85       	ldd	r25, Y+9	; 0x09
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	91 05       	cpc	r25, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <DIO_enuSetPinValue+0x6e>
    1702:	62 c0       	rjmp	.+196    	; 0x17c8 <DIO_enuSetPinValue+0x132>
    1704:	e8 85       	ldd	r30, Y+8	; 0x08
    1706:	f9 85       	ldd	r31, Y+9	; 0x09
    1708:	e3 30       	cpi	r30, 0x03	; 3
    170a:	f1 05       	cpc	r31, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <DIO_enuSetPinValue+0x7a>
    170e:	88 c0       	rjmp	.+272    	; 0x1820 <DIO_enuSetPinValue+0x18a>
    1710:	b2 c0       	rjmp	.+356    	; 0x1876 <DIO_enuSetPinValue+0x1e0>
        {
            case DIO_GROUP_A:
                if(Copy_u8Value == DIO_HIGH)
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	a1 f4       	brne	.+40     	; 0x1740 <DIO_enuSetPinValue+0xaa>
                {
                    PORTA |=  (DIO_MASK_BIT << Copy_u8PinID);
    1718:	ab e3       	ldi	r26, 0x3B	; 59
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	eb e3       	ldi	r30, 0x3B	; 59
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_enuSetPinValue+0xa0>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_enuSetPinValue+0x9c>
    173a:	84 2b       	or	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	9b c0       	rjmp	.+310    	; 0x1876 <DIO_enuSetPinValue+0x1e0>
//							:"I" (Copy_u8PinID)
//							);
                }
                else
                {
                    PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1740:	ab e3       	ldi	r26, 0x3B	; 59
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	eb e3       	ldi	r30, 0x3B	; 59
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <DIO_enuSetPinValue+0xc8>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <DIO_enuSetPinValue+0xc4>
    1762:	80 95       	com	r24
    1764:	84 23       	and	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	86 c0       	rjmp	.+268    	; 0x1876 <DIO_enuSetPinValue+0x1e0>
                }
            break;

            case DIO_GROUP_B:
                PORTB = (Copy_u8Value == DIO_HIGH)? (PORTB | (DIO_MASK_BIT<<Copy_u8PinID)) : (PORTB &  (~(DIO_MASK_BIT<<Copy_u8PinID)));
    176a:	28 e3       	ldi	r18, 0x38	; 56
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	3f 83       	std	Y+7, r19	; 0x07
    1770:	2e 83       	std	Y+6, r18	; 0x06
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	91 f4       	brne	.+36     	; 0x179c <DIO_enuSetPinValue+0x106>
    1778:	e8 e3       	ldi	r30, 0x38	; 56
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_enuSetPinValue+0xfc>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_enuSetPinValue+0xf8>
    1796:	84 2b       	or	r24, r20
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	11 c0       	rjmp	.+34     	; 0x17be <DIO_enuSetPinValue+0x128>
    179c:	e8 e3       	ldi	r30, 0x38	; 56
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_enuSetPinValue+0x11e>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	2a 95       	dec	r18
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_enuSetPinValue+0x11a>
    17b8:	80 95       	com	r24
    17ba:	84 23       	and	r24, r20
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	2d 81       	ldd	r18, Y+5	; 0x05
    17c0:	ee 81       	ldd	r30, Y+6	; 0x06
    17c2:	ff 81       	ldd	r31, Y+7	; 0x07
    17c4:	20 83       	st	Z, r18
    17c6:	57 c0       	rjmp	.+174    	; 0x1876 <DIO_enuSetPinValue+0x1e0>
            break;

            case DIO_GROUP_C:
                if(Copy_u8Value == DIO_HIGH)
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	a1 f4       	brne	.+40     	; 0x17f6 <DIO_enuSetPinValue+0x160>
                {
                    PORTC |=  (DIO_MASK_BIT << Copy_u8PinID);
    17ce:	a5 e3       	ldi	r26, 0x35	; 53
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e3       	ldi	r30, 0x35	; 53
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <DIO_enuSetPinValue+0x156>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <DIO_enuSetPinValue+0x152>
    17f0:	84 2b       	or	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	40 c0       	rjmp	.+128    	; 0x1876 <DIO_enuSetPinValue+0x1e0>
                }
                else
                {
                    PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    17f6:	a5 e3       	ldi	r26, 0x35	; 53
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e5 e3       	ldi	r30, 0x35	; 53
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <DIO_enuSetPinValue+0x17e>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <DIO_enuSetPinValue+0x17a>
    1818:	80 95       	com	r24
    181a:	84 23       	and	r24, r20
    181c:	8c 93       	st	X, r24
    181e:	2b c0       	rjmp	.+86     	; 0x1876 <DIO_enuSetPinValue+0x1e0>
                }
                break;
            
            case DIO_GROUP_D:
                if(Copy_u8Value == DIO_HIGH)
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	a1 f4       	brne	.+40     	; 0x184e <DIO_enuSetPinValue+0x1b8>
                {
                    PORTD |=  (DIO_MASK_BIT << Copy_u8PinID);
    1826:	a2 e3       	ldi	r26, 0x32	; 50
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e2 e3       	ldi	r30, 0x32	; 50
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_enuSetPinValue+0x1ae>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_enuSetPinValue+0x1aa>
    1848:	84 2b       	or	r24, r20
    184a:	8c 93       	st	X, r24
    184c:	14 c0       	rjmp	.+40     	; 0x1876 <DIO_enuSetPinValue+0x1e0>
                }
                else
                {
                    PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    184e:	a2 e3       	ldi	r26, 0x32	; 50
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e2 e3       	ldi	r30, 0x32	; 50
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <DIO_enuSetPinValue+0x1d6>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <DIO_enuSetPinValue+0x1d2>
    1870:	80 95       	com	r24
    1872:	84 23       	and	r24, r20
    1874:	8c 93       	st	X, r24
                break;

            default:
            break;
        }
        Local_enuErrorState = ES_OK;
    1876:	19 82       	std	Y+1, r1	; 0x01
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_enuSetPinValue+0x1e8>
    }
    else
    {
        Local_enuErrorState = ES_OUT_OF_RANGE;
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1880:	29 96       	adiw	r28, 0x09	; 9
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <DIO_enuTogglePinValue+0x6>
    1898:	00 d0       	rcall	.+0      	; 0x189a <DIO_enuTogglePinValue+0x8>
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	8a 83       	std	Y+2, r24	; 0x02
    18a2:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7))
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <DIO_enuTogglePinValue+0x1e>
    18ae:	74 c0       	rjmp	.+232    	; 0x1998 <DIO_enuTogglePinValue+0x106>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	88 30       	cpi	r24, 0x08	; 8
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <DIO_enuTogglePinValue+0x26>
    18b6:	70 c0       	rjmp	.+224    	; 0x1998 <DIO_enuTogglePinValue+0x106>
    {
        switch(Copy_u8GroupID)
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3d 83       	std	Y+5, r19	; 0x05
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	91 05       	cpc	r25, r1
    18ca:	49 f1       	breq	.+82     	; 0x191e <DIO_enuTogglePinValue+0x8c>
    18cc:	2c 81       	ldd	r18, Y+4	; 0x04
    18ce:	3d 81       	ldd	r19, Y+5	; 0x05
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <DIO_enuTogglePinValue+0x4e>
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	61 f0       	breq	.+24     	; 0x18f6 <DIO_enuTogglePinValue+0x64>
    18de:	5a c0       	rjmp	.+180    	; 0x1994 <DIO_enuTogglePinValue+0x102>
    18e0:	2c 81       	ldd	r18, Y+4	; 0x04
    18e2:	3d 81       	ldd	r19, Y+5	; 0x05
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	71 f1       	breq	.+92     	; 0x1946 <DIO_enuTogglePinValue+0xb4>
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	83 30       	cpi	r24, 0x03	; 3
    18f0:	91 05       	cpc	r25, r1
    18f2:	e9 f1       	breq	.+122    	; 0x196e <DIO_enuTogglePinValue+0xdc>
    18f4:	4f c0       	rjmp	.+158    	; 0x1994 <DIO_enuTogglePinValue+0x102>
        {
            case DIO_GROUP_A:
                PORTA ^= (DIO_MASK_BIT <<Copy_u8PinID);
    18f6:	ab e3       	ldi	r26, 0x3B	; 59
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_enuTogglePinValue+0x82>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <DIO_enuTogglePinValue+0x7e>
    1918:	84 27       	eor	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	3b c0       	rjmp	.+118    	; 0x1994 <DIO_enuTogglePinValue+0x102>
            break;

            case DIO_GROUP_B:
                PORTB ^= (DIO_MASK_BIT <<Copy_u8PinID);
    191e:	a8 e3       	ldi	r26, 0x38	; 56
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e8 e3       	ldi	r30, 0x38	; 56
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_enuTogglePinValue+0xaa>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_enuTogglePinValue+0xa6>
    1940:	84 27       	eor	r24, r20
    1942:	8c 93       	st	X, r24
    1944:	27 c0       	rjmp	.+78     	; 0x1994 <DIO_enuTogglePinValue+0x102>
            break;

            case DIO_GROUP_C:
                PORTC ^= (DIO_MASK_BIT <<Copy_u8PinID);
    1946:	a5 e3       	ldi	r26, 0x35	; 53
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e5 e3       	ldi	r30, 0x35	; 53
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 2e       	mov	r0, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <DIO_enuTogglePinValue+0xd2>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <DIO_enuTogglePinValue+0xce>
    1968:	84 27       	eor	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	13 c0       	rjmp	.+38     	; 0x1994 <DIO_enuTogglePinValue+0x102>
            break;
            
            case DIO_GROUP_D:
                PORTD ^= (DIO_MASK_BIT <<Copy_u8PinID);
    196e:	a2 e3       	ldi	r26, 0x32	; 50
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e2 e3       	ldi	r30, 0x32	; 50
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <DIO_enuTogglePinValue+0xfa>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <DIO_enuTogglePinValue+0xf6>
    1990:	84 27       	eor	r24, r20
    1992:	8c 93       	st	X, r24
            break;

            default:
            break;
        }
        Local_enuErrorState = ES_OK;
    1994:	19 82       	std	Y+1, r1	; 0x01
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DIO_enuTogglePinValue+0x10a>
    }
    else
    {
        Local_enuErrorState = ES_OUT_OF_RANGE;
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
    199c:	89 81       	ldd	r24, Y+1	; 0x01
}
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 * Copy_pu8PinValue)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	27 97       	sbiw	r28, 0x07	; 7
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    19c4:	6b 83       	std	Y+3, r22	; 0x03
    19c6:	5d 83       	std	Y+5, r21	; 0x05
    19c8:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_enuErrorState = ES_NOK;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8PinValue != NULL)
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	9d 81       	ldd	r25, Y+5	; 0x05
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <DIO_enuGetPinValue+0x2a>
    19d6:	7d c0       	rjmp	.+250    	; 0x1ad2 <DIO_enuGetPinValue+0x124>
    {
        if ((Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7))
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <DIO_enuGetPinValue+0x32>
    19de:	76 c0       	rjmp	.+236    	; 0x1acc <DIO_enuGetPinValue+0x11e>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	88 30       	cpi	r24, 0x08	; 8
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <DIO_enuGetPinValue+0x3a>
    19e6:	72 c0       	rjmp	.+228    	; 0x1acc <DIO_enuGetPinValue+0x11e>
        {
            switch(Copy_u8GroupID)
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3f 83       	std	Y+7, r19	; 0x07
    19f0:	2e 83       	std	Y+6, r18	; 0x06
    19f2:	4e 81       	ldd	r20, Y+6	; 0x06
    19f4:	5f 81       	ldd	r21, Y+7	; 0x07
    19f6:	41 30       	cpi	r20, 0x01	; 1
    19f8:	51 05       	cpc	r21, r1
    19fa:	59 f1       	breq	.+86     	; 0x1a52 <DIO_enuGetPinValue+0xa4>
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1a00:	82 30       	cpi	r24, 0x02	; 2
    1a02:	91 05       	cpc	r25, r1
    1a04:	34 f4       	brge	.+12     	; 0x1a12 <DIO_enuGetPinValue+0x64>
    1a06:	2e 81       	ldd	r18, Y+6	; 0x06
    1a08:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0a:	21 15       	cp	r18, r1
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	69 f0       	breq	.+26     	; 0x1a2a <DIO_enuGetPinValue+0x7c>
    1a10:	5b c0       	rjmp	.+182    	; 0x1ac8 <DIO_enuGetPinValue+0x11a>
    1a12:	4e 81       	ldd	r20, Y+6	; 0x06
    1a14:	5f 81       	ldd	r21, Y+7	; 0x07
    1a16:	42 30       	cpi	r20, 0x02	; 2
    1a18:	51 05       	cpc	r21, r1
    1a1a:	79 f1       	breq	.+94     	; 0x1a7a <DIO_enuGetPinValue+0xcc>
    1a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a20:	83 30       	cpi	r24, 0x03	; 3
    1a22:	91 05       	cpc	r25, r1
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <DIO_enuGetPinValue+0x7a>
    1a26:	3d c0       	rjmp	.+122    	; 0x1aa2 <DIO_enuGetPinValue+0xf4>
    1a28:	4f c0       	rjmp	.+158    	; 0x1ac8 <DIO_enuGetPinValue+0x11a>
            {
                case DIO_GROUP_A:
                    *Copy_pu8PinValue = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    1a2a:	e9 e3       	ldi	r30, 0x39	; 57
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_enuGetPinValue+0x94>
    1a3e:	55 95       	asr	r21
    1a40:	47 95       	ror	r20
    1a42:	8a 95       	dec	r24
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <DIO_enuGetPinValue+0x90>
    1a46:	ca 01       	movw	r24, r20
    1a48:	81 70       	andi	r24, 0x01	; 1
    1a4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a4c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a4e:	80 83       	st	Z, r24
    1a50:	3b c0       	rjmp	.+118    	; 0x1ac8 <DIO_enuGetPinValue+0x11a>
                break;

                case DIO_GROUP_B:
                    *Copy_pu8PinValue = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    1a52:	e6 e3       	ldi	r30, 0x36	; 54
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a9 01       	movw	r20, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_enuGetPinValue+0xbc>
    1a66:	55 95       	asr	r21
    1a68:	47 95       	ror	r20
    1a6a:	8a 95       	dec	r24
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <DIO_enuGetPinValue+0xb8>
    1a6e:	ca 01       	movw	r24, r20
    1a70:	81 70       	andi	r24, 0x01	; 1
    1a72:	ec 81       	ldd	r30, Y+4	; 0x04
    1a74:	fd 81       	ldd	r31, Y+5	; 0x05
    1a76:	80 83       	st	Z, r24
    1a78:	27 c0       	rjmp	.+78     	; 0x1ac8 <DIO_enuGetPinValue+0x11a>
                break;

                case DIO_GROUP_C:
                    *Copy_pu8PinValue = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    1a7a:	e3 e3       	ldi	r30, 0x33	; 51
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a9 01       	movw	r20, r18
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <DIO_enuGetPinValue+0xe4>
    1a8e:	55 95       	asr	r21
    1a90:	47 95       	ror	r20
    1a92:	8a 95       	dec	r24
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <DIO_enuGetPinValue+0xe0>
    1a96:	ca 01       	movw	r24, r20
    1a98:	81 70       	andi	r24, 0x01	; 1
    1a9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a9e:	80 83       	st	Z, r24
    1aa0:	13 c0       	rjmp	.+38     	; 0x1ac8 <DIO_enuGetPinValue+0x11a>
                break;
                
                case DIO_GROUP_D:
                    *Copy_pu8PinValue = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    1aa2:	e0 e3       	ldi	r30, 0x30	; 48
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a9 01       	movw	r20, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <DIO_enuGetPinValue+0x10c>
    1ab6:	55 95       	asr	r21
    1ab8:	47 95       	ror	r20
    1aba:	8a 95       	dec	r24
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <DIO_enuGetPinValue+0x108>
    1abe:	ca 01       	movw	r24, r20
    1ac0:	81 70       	andi	r24, 0x01	; 1
    1ac2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac6:	80 83       	st	Z, r24
                break;

                default:
                break;
            }
            Local_enuErrorState = ES_OK;
    1ac8:	19 82       	std	Y+1, r1	; 0x01
    1aca:	05 c0       	rjmp	.+10     	; 0x1ad6 <DIO_enuGetPinValue+0x128>
        }
        else
        {
            Local_enuErrorState = ES_OUT_OF_RANGE;
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_enuGetPinValue+0x128>
        }
    }   
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    } 

    return Local_enuErrorState;
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad8:	27 96       	adiw	r28, 0x07	; 7
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <GLCD_Command>:
#define RST		 PC5

#define TotalPage	 8

void GLCD_Command(char Command)		/* GLCD command function */
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	e1 97       	sbiw	r28, 0x31	; 49
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Command;		/* Copy command on data pin */
    1b00:	eb e3       	ldi	r30, 0x3B	; 59
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	89 a9       	ldd	r24, Y+49	; 0x31
    1b06:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/ //from here we detemie it is  data or command 
    1b08:	a5 e3       	ldi	r26, 0x35	; 53
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e5 e3       	ldi	r30, 0x35	; 53
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	8e 7f       	andi	r24, 0xFE	; 254
    1b14:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    1b16:	a5 e3       	ldi	r26, 0x35	; 53
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e5 e3       	ldi	r30, 0x35	; 53
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	8d 7f       	andi	r24, 0xFD	; 253
    1b22:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    1b24:	a5 e3       	ldi	r26, 0x35	; 53
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e5 e3       	ldi	r30, 0x35	; 53
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	84 60       	ori	r24, 0x04	; 4
    1b30:	8c 93       	st	X, r24
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a0 ea       	ldi	r26, 0xA0	; 160
    1b38:	b0 e4       	ldi	r27, 0x40	; 64
    1b3a:	8d a7       	std	Y+45, r24	; 0x2d
    1b3c:	9e a7       	std	Y+46, r25	; 0x2e
    1b3e:	af a7       	std	Y+47, r26	; 0x2f
    1b40:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b42:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b44:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b48:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4a:	2b ea       	ldi	r18, 0xAB	; 171
    1b4c:	3a ea       	ldi	r19, 0xAA	; 170
    1b4e:	4a ea       	ldi	r20, 0xAA	; 170
    1b50:	50 e4       	ldi	r21, 0x40	; 64
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	89 a7       	std	Y+41, r24	; 0x29
    1b5c:	9a a7       	std	Y+42, r25	; 0x2a
    1b5e:	ab a7       	std	Y+43, r26	; 0x2b
    1b60:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1b62:	69 a5       	ldd	r22, Y+41	; 0x29
    1b64:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	1c f4       	brge	.+6      	; 0x1b80 <GLCD_Command+0x96>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	88 a7       	std	Y+40, r24	; 0x28
    1b7e:	91 c0       	rjmp	.+290    	; 0x1ca2 <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    1b80:	69 a5       	ldd	r22, Y+41	; 0x29
    1b82:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b84:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b86:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	53 e4       	ldi	r21, 0x43	; 67
    1b90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	0c f0       	brlt	.+2      	; 0x1b9a <GLCD_Command+0xb0>
    1b98:	7b c0       	rjmp	.+246    	; 0x1c90 <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1b9a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b9c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a e7       	ldi	r20, 0x7A	; 122
    1ba8:	54 e4       	ldi	r21, 0x44	; 68
    1baa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8c a3       	std	Y+36, r24	; 0x24
    1bb4:	9d a3       	std	Y+37, r25	; 0x25
    1bb6:	ae a3       	std	Y+38, r26	; 0x26
    1bb8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bba:	6c a1       	ldd	r22, Y+36	; 0x24
    1bbc:	7d a1       	ldd	r23, Y+37	; 0x25
    1bbe:	8e a1       	ldd	r24, Y+38	; 0x26
    1bc0:	9f a1       	ldd	r25, Y+39	; 0x27
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4a e7       	ldi	r20, 0x7A	; 122
    1bc8:	55 e4       	ldi	r21, 0x45	; 69
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	88 a3       	std	Y+32, r24	; 0x20
    1bd4:	99 a3       	std	Y+33, r25	; 0x21
    1bd6:	aa a3       	std	Y+34, r26	; 0x22
    1bd8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1bda:	68 a1       	ldd	r22, Y+32	; 0x20
    1bdc:	79 a1       	ldd	r23, Y+33	; 0x21
    1bde:	8a a1       	ldd	r24, Y+34	; 0x22
    1be0:	9b a1       	ldd	r25, Y+35	; 0x23
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	5f e3       	ldi	r21, 0x3F	; 63
    1bea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bee:	88 23       	and	r24, r24
    1bf0:	2c f4       	brge	.+10     	; 0x1bfc <GLCD_Command+0x112>
		__ticks = 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9f 8f       	std	Y+31, r25	; 0x1f
    1bf8:	8e 8f       	std	Y+30, r24	; 0x1e
    1bfa:	3f c0       	rjmp	.+126    	; 0x1c7a <GLCD_Command+0x190>
	else if (__tmp > 65535)
    1bfc:	68 a1       	ldd	r22, Y+32	; 0x20
    1bfe:	79 a1       	ldd	r23, Y+33	; 0x21
    1c00:	8a a1       	ldd	r24, Y+34	; 0x22
    1c02:	9b a1       	ldd	r25, Y+35	; 0x23
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	3f ef       	ldi	r19, 0xFF	; 255
    1c08:	4f e7       	ldi	r20, 0x7F	; 127
    1c0a:	57 e4       	ldi	r21, 0x47	; 71
    1c0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c10:	18 16       	cp	r1, r24
    1c12:	4c f5       	brge	.+82     	; 0x1c66 <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c14:	6c a1       	ldd	r22, Y+36	; 0x24
    1c16:	7d a1       	ldd	r23, Y+37	; 0x25
    1c18:	8e a1       	ldd	r24, Y+38	; 0x26
    1c1a:	9f a1       	ldd	r25, Y+39	; 0x27
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e2       	ldi	r20, 0x20	; 32
    1c22:	51 e4       	ldi	r21, 0x41	; 65
    1c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9f 8f       	std	Y+31, r25	; 0x1f
    1c3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c3c:	0f c0       	rjmp	.+30     	; 0x1c5c <GLCD_Command+0x172>
    1c3e:	80 e9       	ldi	r24, 0x90	; 144
    1c40:	91 e0       	ldi	r25, 0x01	; 1
    1c42:	9d 8f       	std	Y+29, r25	; 0x1d
    1c44:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c46:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c48:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <GLCD_Command+0x160>
    1c4e:	9d 8f       	std	Y+29, r25	; 0x1d
    1c50:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c54:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	9f 8f       	std	Y+31, r25	; 0x1f
    1c5a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c5e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	69 f7       	brne	.-38     	; 0x1c3e <GLCD_Command+0x154>
    1c64:	24 c0       	rjmp	.+72     	; 0x1cae <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c66:	68 a1       	ldd	r22, Y+32	; 0x20
    1c68:	79 a1       	ldd	r23, Y+33	; 0x21
    1c6a:	8a a1       	ldd	r24, Y+34	; 0x22
    1c6c:	9b a1       	ldd	r25, Y+35	; 0x23
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9f 8f       	std	Y+31, r25	; 0x1f
    1c78:	8e 8f       	std	Y+30, r24	; 0x1e
    1c7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c7e:	9b 8f       	std	Y+27, r25	; 0x1b
    1c80:	8a 8f       	std	Y+26, r24	; 0x1a
    1c82:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c84:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <GLCD_Command+0x19c>
    1c8a:	9b 8f       	std	Y+27, r25	; 0x1b
    1c8c:	8a 8f       	std	Y+26, r24	; 0x1a
    1c8e:	0f c0       	rjmp	.+30     	; 0x1cae <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c90:	69 a5       	ldd	r22, Y+41	; 0x29
    1c92:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c94:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c96:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	88 a7       	std	Y+40, r24	; 0x28
    1ca2:	88 a5       	ldd	r24, Y+40	; 0x28
    1ca4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ca6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ca8:	8a 95       	dec	r24
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <GLCD_Command+0x1be>
    1cac:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    1cae:	a5 e3       	ldi	r26, 0x35	; 53
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e5 e3       	ldi	r30, 0x35	; 53
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8b 7f       	andi	r24, 0xFB	; 251
    1cba:	8c 93       	st	X, r24
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a0 ea       	ldi	r26, 0xA0	; 160
    1cc2:	b0 e4       	ldi	r27, 0x40	; 64
    1cc4:	8d 8b       	std	Y+21, r24	; 0x15
    1cc6:	9e 8b       	std	Y+22, r25	; 0x16
    1cc8:	af 8b       	std	Y+23, r26	; 0x17
    1cca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cce:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd4:	2b ea       	ldi	r18, 0xAB	; 171
    1cd6:	3a ea       	ldi	r19, 0xAA	; 170
    1cd8:	4a ea       	ldi	r20, 0xAA	; 170
    1cda:	50 e4       	ldi	r21, 0x40	; 64
    1cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	89 8b       	std	Y+17, r24	; 0x11
    1ce6:	9a 8b       	std	Y+18, r25	; 0x12
    1ce8:	ab 8b       	std	Y+19, r26	; 0x13
    1cea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1cec:	69 89       	ldd	r22, Y+17	; 0x11
    1cee:	7a 89       	ldd	r23, Y+18	; 0x12
    1cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	1c f4       	brge	.+6      	; 0x1d0a <GLCD_Command+0x220>
		__ticks = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	88 8b       	std	Y+16, r24	; 0x10
    1d08:	91 c0       	rjmp	.+290    	; 0x1e2c <GLCD_Command+0x342>
	else if (__tmp > 255)
    1d0a:	69 89       	ldd	r22, Y+17	; 0x11
    1d0c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d10:	9c 89       	ldd	r25, Y+20	; 0x14
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4f e7       	ldi	r20, 0x7F	; 127
    1d18:	53 e4       	ldi	r21, 0x43	; 67
    1d1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1e:	18 16       	cp	r1, r24
    1d20:	0c f0       	brlt	.+2      	; 0x1d24 <GLCD_Command+0x23a>
    1d22:	7b c0       	rjmp	.+246    	; 0x1e1a <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    1d24:	6d 89       	ldd	r22, Y+21	; 0x15
    1d26:	7e 89       	ldd	r23, Y+22	; 0x16
    1d28:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	4a e7       	ldi	r20, 0x7A	; 122
    1d32:	54 e4       	ldi	r21, 0x44	; 68
    1d34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	8c 87       	std	Y+12, r24	; 0x0c
    1d3e:	9d 87       	std	Y+13, r25	; 0x0d
    1d40:	ae 87       	std	Y+14, r26	; 0x0e
    1d42:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d44:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d46:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4a e7       	ldi	r20, 0x7A	; 122
    1d52:	55 e4       	ldi	r21, 0x45	; 69
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	88 87       	std	Y+8, r24	; 0x08
    1d5e:	99 87       	std	Y+9, r25	; 0x09
    1d60:	aa 87       	std	Y+10, r26	; 0x0a
    1d62:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d64:	68 85       	ldd	r22, Y+8	; 0x08
    1d66:	79 85       	ldd	r23, Y+9	; 0x09
    1d68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e8       	ldi	r20, 0x80	; 128
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <GLCD_Command+0x29c>
		__ticks = 1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9f 83       	std	Y+7, r25	; 0x07
    1d82:	8e 83       	std	Y+6, r24	; 0x06
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    1d86:	68 85       	ldd	r22, Y+8	; 0x08
    1d88:	79 85       	ldd	r23, Y+9	; 0x09
    1d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	3f ef       	ldi	r19, 0xFF	; 255
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	57 e4       	ldi	r21, 0x47	; 71
    1d96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	4c f5       	brge	.+82     	; 0x1df0 <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1da0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1da2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1da4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e2       	ldi	r20, 0x20	; 32
    1dac:	51 e4       	ldi	r21, 0x41	; 65
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9f 83       	std	Y+7, r25	; 0x07
    1dc4:	8e 83       	std	Y+6, r24	; 0x06
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <GLCD_Command+0x2fc>
    1dc8:	80 e9       	ldi	r24, 0x90	; 144
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	9d 83       	std	Y+5, r25	; 0x05
    1dce:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <GLCD_Command+0x2ea>
    1dd8:	9d 83       	std	Y+5, r25	; 0x05
    1dda:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dde:	9f 81       	ldd	r25, Y+7	; 0x07
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	9f 83       	std	Y+7, r25	; 0x07
    1de4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	8e 81       	ldd	r24, Y+6	; 0x06
    1de8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	69 f7       	brne	.-38     	; 0x1dc8 <GLCD_Command+0x2de>
    1dee:	24 c0       	rjmp	.+72     	; 0x1e38 <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	68 85       	ldd	r22, Y+8	; 0x08
    1df2:	79 85       	ldd	r23, Y+9	; 0x09
    1df4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1df6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9f 83       	std	Y+7, r25	; 0x07
    1e02:	8e 83       	std	Y+6, r24	; 0x06
    1e04:	8e 81       	ldd	r24, Y+6	; 0x06
    1e06:	9f 81       	ldd	r25, Y+7	; 0x07
    1e08:	9b 83       	std	Y+3, r25	; 0x03
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <GLCD_Command+0x326>
    1e14:	9b 83       	std	Y+3, r25	; 0x03
    1e16:	8a 83       	std	Y+2, r24	; 0x02
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e1a:	69 89       	ldd	r22, Y+17	; 0x11
    1e1c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e20:	9c 89       	ldd	r25, Y+20	; 0x14
    1e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	88 8b       	std	Y+16, r24	; 0x10
    1e2c:	88 89       	ldd	r24, Y+16	; 0x10
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	8a 95       	dec	r24
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <GLCD_Command+0x348>
    1e36:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    1e38:	e1 96       	adiw	r28, 0x31	; 49
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <GLCD_Data>:

void GLCD_Data(char Data)		/* GLCD data function */
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	e1 97       	sbiw	r28, 0x31	; 49
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Data;		/* Copy data on data pin */
    1e60:	eb e3       	ldi	r30, 0x3B	; 59
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	89 a9       	ldd	r24, Y+49	; 0x31
    1e66:	80 83       	st	Z, r24
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
    1e68:	a5 e3       	ldi	r26, 0x35	; 53
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e5 e3       	ldi	r30, 0x35	; 53
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	81 60       	ori	r24, 0x01	; 1
    1e74:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    1e76:	a5 e3       	ldi	r26, 0x35	; 53
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e3       	ldi	r30, 0x35	; 53
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8d 7f       	andi	r24, 0xFD	; 253
    1e82:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    1e84:	a5 e3       	ldi	r26, 0x35	; 53
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e5 e3       	ldi	r30, 0x35	; 53
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	84 60       	ori	r24, 0x04	; 4
    1e90:	8c 93       	st	X, r24
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 ea       	ldi	r26, 0xA0	; 160
    1e98:	b0 e4       	ldi	r27, 0x40	; 64
    1e9a:	8d a7       	std	Y+45, r24	; 0x2d
    1e9c:	9e a7       	std	Y+46, r25	; 0x2e
    1e9e:	af a7       	std	Y+47, r26	; 0x2f
    1ea0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ea2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ea4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eaa:	2b ea       	ldi	r18, 0xAB	; 171
    1eac:	3a ea       	ldi	r19, 0xAA	; 170
    1eae:	4a ea       	ldi	r20, 0xAA	; 170
    1eb0:	50 e4       	ldi	r21, 0x40	; 64
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	89 a7       	std	Y+41, r24	; 0x29
    1ebc:	9a a7       	std	Y+42, r25	; 0x2a
    1ebe:	ab a7       	std	Y+43, r26	; 0x2b
    1ec0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ec2:	69 a5       	ldd	r22, Y+41	; 0x29
    1ec4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ec6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	1c f4       	brge	.+6      	; 0x1ee0 <GLCD_Data+0x96>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	88 a7       	std	Y+40, r24	; 0x28
    1ede:	91 c0       	rjmp	.+290    	; 0x2002 <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    1ee0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ee2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4f e7       	ldi	r20, 0x7F	; 127
    1eee:	53 e4       	ldi	r21, 0x43	; 67
    1ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef4:	18 16       	cp	r1, r24
    1ef6:	0c f0       	brlt	.+2      	; 0x1efa <GLCD_Data+0xb0>
    1ef8:	7b c0       	rjmp	.+246    	; 0x1ff0 <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1efa:	6d a5       	ldd	r22, Y+45	; 0x2d
    1efc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f00:	98 a9       	ldd	r25, Y+48	; 0x30
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a e7       	ldi	r20, 0x7A	; 122
    1f08:	54 e4       	ldi	r21, 0x44	; 68
    1f0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8c a3       	std	Y+36, r24	; 0x24
    1f14:	9d a3       	std	Y+37, r25	; 0x25
    1f16:	ae a3       	std	Y+38, r26	; 0x26
    1f18:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f1c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f1e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f20:	9f a1       	ldd	r25, Y+39	; 0x27
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4a e7       	ldi	r20, 0x7A	; 122
    1f28:	55 e4       	ldi	r21, 0x45	; 69
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	88 a3       	std	Y+32, r24	; 0x20
    1f34:	99 a3       	std	Y+33, r25	; 0x21
    1f36:	aa a3       	std	Y+34, r26	; 0x22
    1f38:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f3a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f3c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f3e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f40:	9b a1       	ldd	r25, Y+35	; 0x23
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e8       	ldi	r20, 0x80	; 128
    1f48:	5f e3       	ldi	r21, 0x3F	; 63
    1f4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f4e:	88 23       	and	r24, r24
    1f50:	2c f4       	brge	.+10     	; 0x1f5c <GLCD_Data+0x112>
		__ticks = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9f 8f       	std	Y+31, r25	; 0x1f
    1f58:	8e 8f       	std	Y+30, r24	; 0x1e
    1f5a:	3f c0       	rjmp	.+126    	; 0x1fda <GLCD_Data+0x190>
	else if (__tmp > 65535)
    1f5c:	68 a1       	ldd	r22, Y+32	; 0x20
    1f5e:	79 a1       	ldd	r23, Y+33	; 0x21
    1f60:	8a a1       	ldd	r24, Y+34	; 0x22
    1f62:	9b a1       	ldd	r25, Y+35	; 0x23
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	3f ef       	ldi	r19, 0xFF	; 255
    1f68:	4f e7       	ldi	r20, 0x7F	; 127
    1f6a:	57 e4       	ldi	r21, 0x47	; 71
    1f6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f70:	18 16       	cp	r1, r24
    1f72:	4c f5       	brge	.+82     	; 0x1fc6 <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f74:	6c a1       	ldd	r22, Y+36	; 0x24
    1f76:	7d a1       	ldd	r23, Y+37	; 0x25
    1f78:	8e a1       	ldd	r24, Y+38	; 0x26
    1f7a:	9f a1       	ldd	r25, Y+39	; 0x27
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e2       	ldi	r20, 0x20	; 32
    1f82:	51 e4       	ldi	r21, 0x41	; 65
    1f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9f 8f       	std	Y+31, r25	; 0x1f
    1f9a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <GLCD_Data+0x172>
    1f9e:	80 e9       	ldi	r24, 0x90	; 144
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	9d 8f       	std	Y+29, r25	; 0x1d
    1fa4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fa6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fa8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <GLCD_Data+0x160>
    1fae:	9d 8f       	std	Y+29, r25	; 0x1d
    1fb0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	9f 8f       	std	Y+31, r25	; 0x1f
    1fba:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fbe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	69 f7       	brne	.-38     	; 0x1f9e <GLCD_Data+0x154>
    1fc4:	24 c0       	rjmp	.+72     	; 0x200e <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc6:	68 a1       	ldd	r22, Y+32	; 0x20
    1fc8:	79 a1       	ldd	r23, Y+33	; 0x21
    1fca:	8a a1       	ldd	r24, Y+34	; 0x22
    1fcc:	9b a1       	ldd	r25, Y+35	; 0x23
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fd8:	8e 8f       	std	Y+30, r24	; 0x1e
    1fda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fdc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fde:	9b 8f       	std	Y+27, r25	; 0x1b
    1fe0:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <GLCD_Data+0x19c>
    1fea:	9b 8f       	std	Y+27, r25	; 0x1b
    1fec:	8a 8f       	std	Y+26, r24	; 0x1a
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ff0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ff2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ff4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	88 a7       	std	Y+40, r24	; 0x28
    2002:	88 a5       	ldd	r24, Y+40	; 0x28
    2004:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2006:	89 8d       	ldd	r24, Y+25	; 0x19
    2008:	8a 95       	dec	r24
    200a:	f1 f7       	brne	.-4      	; 0x2008 <GLCD_Data+0x1be>
    200c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    200e:	a5 e3       	ldi	r26, 0x35	; 53
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e5 e3       	ldi	r30, 0x35	; 53
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8b 7f       	andi	r24, 0xFB	; 251
    201a:	8c 93       	st	X, r24
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a0 ea       	ldi	r26, 0xA0	; 160
    2022:	b0 e4       	ldi	r27, 0x40	; 64
    2024:	8d 8b       	std	Y+21, r24	; 0x15
    2026:	9e 8b       	std	Y+22, r25	; 0x16
    2028:	af 8b       	std	Y+23, r26	; 0x17
    202a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    202c:	6d 89       	ldd	r22, Y+21	; 0x15
    202e:	7e 89       	ldd	r23, Y+22	; 0x16
    2030:	8f 89       	ldd	r24, Y+23	; 0x17
    2032:	98 8d       	ldd	r25, Y+24	; 0x18
    2034:	2b ea       	ldi	r18, 0xAB	; 171
    2036:	3a ea       	ldi	r19, 0xAA	; 170
    2038:	4a ea       	ldi	r20, 0xAA	; 170
    203a:	50 e4       	ldi	r21, 0x40	; 64
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	89 8b       	std	Y+17, r24	; 0x11
    2046:	9a 8b       	std	Y+18, r25	; 0x12
    2048:	ab 8b       	std	Y+19, r26	; 0x13
    204a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    204c:	69 89       	ldd	r22, Y+17	; 0x11
    204e:	7a 89       	ldd	r23, Y+18	; 0x12
    2050:	8b 89       	ldd	r24, Y+19	; 0x13
    2052:	9c 89       	ldd	r25, Y+20	; 0x14
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e8       	ldi	r20, 0x80	; 128
    205a:	5f e3       	ldi	r21, 0x3F	; 63
    205c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2060:	88 23       	and	r24, r24
    2062:	1c f4       	brge	.+6      	; 0x206a <GLCD_Data+0x220>
		__ticks = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	88 8b       	std	Y+16, r24	; 0x10
    2068:	91 c0       	rjmp	.+290    	; 0x218c <GLCD_Data+0x342>
	else if (__tmp > 255)
    206a:	69 89       	ldd	r22, Y+17	; 0x11
    206c:	7a 89       	ldd	r23, Y+18	; 0x12
    206e:	8b 89       	ldd	r24, Y+19	; 0x13
    2070:	9c 89       	ldd	r25, Y+20	; 0x14
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	53 e4       	ldi	r21, 0x43	; 67
    207a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	0c f0       	brlt	.+2      	; 0x2084 <GLCD_Data+0x23a>
    2082:	7b c0       	rjmp	.+246    	; 0x217a <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    2084:	6d 89       	ldd	r22, Y+21	; 0x15
    2086:	7e 89       	ldd	r23, Y+22	; 0x16
    2088:	8f 89       	ldd	r24, Y+23	; 0x17
    208a:	98 8d       	ldd	r25, Y+24	; 0x18
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a e7       	ldi	r20, 0x7A	; 122
    2092:	54 e4       	ldi	r21, 0x44	; 68
    2094:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	8c 87       	std	Y+12, r24	; 0x0c
    209e:	9d 87       	std	Y+13, r25	; 0x0d
    20a0:	ae 87       	std	Y+14, r26	; 0x0e
    20a2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    20a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    20a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a e7       	ldi	r20, 0x7A	; 122
    20b2:	55 e4       	ldi	r21, 0x45	; 69
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	88 87       	std	Y+8, r24	; 0x08
    20be:	99 87       	std	Y+9, r25	; 0x09
    20c0:	aa 87       	std	Y+10, r26	; 0x0a
    20c2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20c4:	68 85       	ldd	r22, Y+8	; 0x08
    20c6:	79 85       	ldd	r23, Y+9	; 0x09
    20c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <GLCD_Data+0x29c>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9f 83       	std	Y+7, r25	; 0x07
    20e2:	8e 83       	std	Y+6, r24	; 0x06
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    20e6:	68 85       	ldd	r22, Y+8	; 0x08
    20e8:	79 85       	ldd	r23, Y+9	; 0x09
    20ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2100:	7d 85       	ldd	r23, Y+13	; 0x0d
    2102:	8e 85       	ldd	r24, Y+14	; 0x0e
    2104:	9f 85       	ldd	r25, Y+15	; 0x0f
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9f 83       	std	Y+7, r25	; 0x07
    2124:	8e 83       	std	Y+6, r24	; 0x06
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <GLCD_Data+0x2fc>
    2128:	80 e9       	ldi	r24, 0x90	; 144
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	9d 83       	std	Y+5, r25	; 0x05
    212e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <GLCD_Data+0x2ea>
    2138:	9d 83       	std	Y+5, r25	; 0x05
    213a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8e 81       	ldd	r24, Y+6	; 0x06
    213e:	9f 81       	ldd	r25, Y+7	; 0x07
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9f 83       	std	Y+7, r25	; 0x07
    2144:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8e 81       	ldd	r24, Y+6	; 0x06
    2148:	9f 81       	ldd	r25, Y+7	; 0x07
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <GLCD_Data+0x2de>
    214e:	24 c0       	rjmp	.+72     	; 0x2198 <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	68 85       	ldd	r22, Y+8	; 0x08
    2152:	79 85       	ldd	r23, Y+9	; 0x09
    2154:	8a 85       	ldd	r24, Y+10	; 0x0a
    2156:	9b 85       	ldd	r25, Y+11	; 0x0b
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9f 83       	std	Y+7, r25	; 0x07
    2162:	8e 83       	std	Y+6, r24	; 0x06
    2164:	8e 81       	ldd	r24, Y+6	; 0x06
    2166:	9f 81       	ldd	r25, Y+7	; 0x07
    2168:	9b 83       	std	Y+3, r25	; 0x03
    216a:	8a 83       	std	Y+2, r24	; 0x02
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	9b 81       	ldd	r25, Y+3	; 0x03
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <GLCD_Data+0x326>
    2174:	9b 83       	std	Y+3, r25	; 0x03
    2176:	8a 83       	std	Y+2, r24	; 0x02
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    217a:	69 89       	ldd	r22, Y+17	; 0x11
    217c:	7a 89       	ldd	r23, Y+18	; 0x12
    217e:	8b 89       	ldd	r24, Y+19	; 0x13
    2180:	9c 89       	ldd	r25, Y+20	; 0x14
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	88 8b       	std	Y+16, r24	; 0x10
    218c:	88 89       	ldd	r24, Y+16	; 0x10
    218e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	8a 95       	dec	r24
    2194:	f1 f7       	brne	.-4      	; 0x2192 <GLCD_Data+0x348>
    2196:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    2198:	e1 96       	adiw	r28, 0x31	; 49
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <GLCD_Init>:

void GLCD_Init()			/* GLCD initialize function */
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	2e 97       	sbiw	r28, 0x0e	; 14
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
	Data_Port_Dir = 0xFF;
    21be:	ea e3       	ldi	r30, 0x3A	; 58
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	8f ef       	ldi	r24, 0xFF	; 255
    21c4:	80 83       	st	Z, r24
	Command_Port_Dir = 0xFF;
    21c6:	e4 e3       	ldi	r30, 0x34	; 52
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	80 83       	st	Z, r24
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST); // divid screen into two halfs 
    21ce:	a5 e3       	ldi	r26, 0x35	; 53
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e5 e3       	ldi	r30, 0x35	; 53
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	88 63       	ori	r24, 0x38	; 56
    21da:	8c 93       	st	X, r24
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a0 ea       	ldi	r26, 0xA0	; 160
    21e2:	b1 e4       	ldi	r27, 0x41	; 65
    21e4:	8b 87       	std	Y+11, r24	; 0x0b
    21e6:	9c 87       	std	Y+12, r25	; 0x0c
    21e8:	ad 87       	std	Y+13, r26	; 0x0d
    21ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4a e7       	ldi	r20, 0x7A	; 122
    21fa:	55 e4       	ldi	r21, 0x45	; 69
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8f 83       	std	Y+7, r24	; 0x07
    2206:	98 87       	std	Y+8, r25	; 0x08
    2208:	a9 87       	std	Y+9, r26	; 0x09
    220a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2220:	88 23       	and	r24, r24
    2222:	2c f4       	brge	.+10     	; 0x222e <GLCD_Init+0x84>
		__ticks = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	3f c0       	rjmp	.+126    	; 0x22ac <GLCD_Init+0x102>
	else if (__tmp > 65535)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	4c f5       	brge	.+82     	; 0x2298 <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2246:	6b 85       	ldd	r22, Y+11	; 0x0b
    2248:	7c 85       	ldd	r23, Y+12	; 0x0c
    224a:	8d 85       	ldd	r24, Y+13	; 0x0d
    224c:	9e 85       	ldd	r25, Y+14	; 0x0e
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	0f c0       	rjmp	.+30     	; 0x228e <GLCD_Init+0xe4>
    2270:	80 e9       	ldi	r24, 0x90	; 144
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <GLCD_Init+0xd2>
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	69 f7       	brne	.-38     	; 0x2270 <GLCD_Init+0xc6>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	6f 81       	ldd	r22, Y+7	; 0x07
    229a:	78 85       	ldd	r23, Y+8	; 0x08
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	9e 81       	ldd	r25, Y+6	; 0x06
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <GLCD_Init+0x10e>
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
    22c0:	8e e3       	ldi	r24, 0x3E	; 62
    22c2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
    22c6:	80 e4       	ldi	r24, 0x40	; 64
    22c8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
    22cc:	88 eb       	ldi	r24, 0xB8	; 184
    22ce:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
    22d2:	80 ec       	ldi	r24, 0xC0	; 192
    22d4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
    22d8:	8f e3       	ldi	r24, 0x3F	; 63
    22da:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
}
    22de:	2e 96       	adiw	r28, 0x0e	; 14
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <GLCD_String>:


void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
    22f0:	0f 93       	push	r16
    22f2:	1f 93       	push	r17
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	2f 97       	sbiw	r28, 0x0f	; 15
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	8d 87       	std	Y+13, r24	; 0x0d
    230a:	7f 87       	std	Y+15, r23	; 0x0f
    230c:	6e 87       	std	Y+14, r22	; 0x0e
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no); //start page + new page 
    230e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	88 54       	subi	r24, 0x48	; 72
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	98 87       	std	Y+8, r25	; 0x08
    231a:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int Y_address = 0;
    231c:	1e 82       	std	Y+6, r1	; 0x06
    231e:	1d 82       	std	Y+5, r1	; 0x05
	float Page_inc = 0.5;
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a0 e0       	ldi	r26, 0x00	; 0
    2326:	bf e3       	ldi	r27, 0x3F	; 63
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	ab 83       	std	Y+3, r26	; 0x03
    232e:	bc 83       	std	Y+4, r27	; 0x04

     //write in the left 
	Command_Port |= (1 << CS1);	/* Select Left half of display */
    2330:	a5 e3       	ldi	r26, 0x35	; 53
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e5 e3       	ldi	r30, 0x35	; 53
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	88 60       	ori	r24, 0x08	; 8
    233c:	8c 93       	st	X, r24
	Command_Port &= ~(1 << CS2);
    233e:	a5 e3       	ldi	r26, 0x35	; 53
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e5 e3       	ldi	r30, 0x35	; 53
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	8f 7e       	andi	r24, 0xEF	; 239
    234a:	8c 93       	st	X, r24

	GLCD_Command(Page);
    234c:	8f 81       	ldd	r24, Y+7	; 0x07
    234e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    2352:	1c 86       	std	Y+12, r1	; 0x0c
    2354:	1b 86       	std	Y+11, r1	; 0x0b
    2356:	16 c2       	rjmp	.+1068   	; 0x2784 <GLCD_String+0x494>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
    2358:	8d 85       	ldd	r24, Y+13	; 0x0d
    235a:	88 2f       	mov	r24, r24
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	96 95       	lsr	r25
    2360:	98 2f       	mov	r25, r24
    2362:	88 27       	eor	r24, r24
    2364:	97 95       	ror	r25
    2366:	87 95       	ror	r24
    2368:	90 95       	com	r25
    236a:	81 95       	neg	r24
    236c:	9f 4f       	sbci	r25, 0xFF	; 255
    236e:	85 50       	subi	r24, 0x05	; 5
    2370:	9c 4f       	sbci	r25, 0xFC	; 252
    2372:	9c 01       	movw	r18, r24
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	28 17       	cp	r18, r24
    237a:	39 07       	cpc	r19, r25
    237c:	08 f4       	brcc	.+2      	; 0x2380 <GLCD_String+0x90>
    237e:	0d c2       	rjmp	.+1050   	; 0x279a <GLCD_String+0x4aa>
		break;
		if (str[i]!=32)
    2380:	2e 85       	ldd	r18, Y+14	; 0x0e
    2382:	3f 85       	ldd	r19, Y+15	; 0x0f
    2384:	8b 85       	ldd	r24, Y+11	; 0x0b
    2386:	9c 85       	ldd	r25, Y+12	; 0x0c
    2388:	f9 01       	movw	r30, r18
    238a:	e8 0f       	add	r30, r24
    238c:	f9 1f       	adc	r31, r25
    238e:	80 81       	ld	r24, Z
    2390:	80 32       	cpi	r24, 0x20	; 32
    2392:	09 f4       	brne	.+2      	; 0x2396 <GLCD_String+0xa6>
    2394:	80 c0       	rjmp	.+256    	; 0x2496 <GLCD_String+0x1a6>
		{
			for (column=1; column<=FontWidth; column++)
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9a 87       	std	Y+10, r25	; 0x0a
    239c:	89 87       	std	Y+9, r24	; 0x09
    239e:	75 c0       	rjmp	.+234    	; 0x248a <GLCD_String+0x19a>
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
    23a0:	2d 81       	ldd	r18, Y+5	; 0x05
    23a2:	3e 81       	ldd	r19, Y+6	; 0x06
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	89 01       	movw	r16, r18
    23aa:	08 0f       	add	r16, r24
    23ac:	19 1f       	adc	r17, r25
    23ae:	69 81       	ldd	r22, Y+1	; 0x01
    23b0:	7a 81       	ldd	r23, Y+2	; 0x02
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	96 95       	lsr	r25
    23d4:	98 2f       	mov	r25, r24
    23d6:	88 27       	eor	r24, r24
    23d8:	97 95       	ror	r25
    23da:	87 95       	ror	r24
    23dc:	08 17       	cp	r16, r24
    23de:	19 07       	cpc	r17, r25
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <GLCD_String+0xf4>
    23e2:	4e c0       	rjmp	.+156    	; 0x2480 <GLCD_String+0x190>
				{
					if (column == FontWidth)
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	85 30       	cpi	r24, 0x05	; 5
    23ea:	91 05       	cpc	r25, r1
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <GLCD_String+0x100>
    23ee:	53 c0       	rjmp	.+166    	; 0x2496 <GLCD_String+0x1a6>
					break;
					GLCD_Command(0x40);
    23f0:	80 e4       	ldi	r24, 0x40	; 64
    23f2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
					Y_address = Y_address + column;
    23f6:	2d 81       	ldd	r18, Y+5	; 0x05
    23f8:	3e 81       	ldd	r19, Y+6	; 0x06
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	82 0f       	add	r24, r18
    2400:	93 1f       	adc	r25, r19
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
					Command_Port ^= (1 << CS1);
    2406:	a5 e3       	ldi	r26, 0x35	; 53
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e5 e3       	ldi	r30, 0x35	; 53
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	90 81       	ld	r25, Z
    2410:	88 e0       	ldi	r24, 0x08	; 8
    2412:	89 27       	eor	r24, r25
    2414:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    2416:	a5 e3       	ldi	r26, 0x35	; 53
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e5 e3       	ldi	r30, 0x35	; 53
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	90 81       	ld	r25, Z
    2420:	80 e1       	ldi	r24, 0x10	; 16
    2422:	89 27       	eor	r24, r25
    2424:	8c 93       	st	X, r24
					GLCD_Command(Page + Page_inc);
    2426:	8f 81       	ldd	r24, Y+7	; 0x07
    2428:	98 85       	ldd	r25, Y+8	; 0x08
    242a:	cc 01       	movw	r24, r24
    242c:	a0 e0       	ldi	r26, 0x00	; 0
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	29 81       	ldd	r18, Y+1	; 0x01
    2442:	3a 81       	ldd	r19, Y+2	; 0x02
    2444:	4b 81       	ldd	r20, Y+3	; 0x03
    2446:	5c 81       	ldd	r21, Y+4	; 0x04
    2448:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    2460:	69 81       	ldd	r22, Y+1	; 0x01
    2462:	7a 81       	ldd	r23, Y+2	; 0x02
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	ab 83       	std	Y+3, r26	; 0x03
    247e:	bc 83       	std	Y+4, r27	; 0x04
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
    2480:	89 85       	ldd	r24, Y+9	; 0x09
    2482:	9a 85       	ldd	r25, Y+10	; 0x0a
    2484:	01 96       	adiw	r24, 0x01	; 1
    2486:	9a 87       	std	Y+10, r25	; 0x0a
    2488:	89 87       	std	Y+9, r24	; 0x09
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	86 30       	cpi	r24, 0x06	; 6
    2490:	91 05       	cpc	r25, r1
    2492:	08 f4       	brcc	.+2      	; 0x2496 <GLCD_String+0x1a6>
    2494:	85 cf       	rjmp	.-246    	; 0x23a0 <GLCD_String+0xb0>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
    2496:	8d 85       	ldd	r24, Y+13	; 0x0d
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	96 95       	lsr	r25
    249e:	98 2f       	mov	r25, r24
    24a0:	88 27       	eor	r24, r24
    24a2:	97 95       	ror	r25
    24a4:	87 95       	ror	r24
    24a6:	90 95       	com	r25
    24a8:	81 95       	neg	r24
    24aa:	9f 4f       	sbci	r25, 0xFF	; 255
    24ac:	85 50       	subi	r24, 0x05	; 5
    24ae:	9c 4f       	sbci	r25, 0xFC	; 252
    24b0:	9c 01       	movw	r18, r24
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	28 17       	cp	r18, r24
    24b8:	39 07       	cpc	r19, r25
    24ba:	08 f4       	brcc	.+2      	; 0x24be <GLCD_String+0x1ce>
    24bc:	6e c1       	rjmp	.+732    	; 0x279a <GLCD_String+0x4aa>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
    24be:	2e 85       	ldd	r18, Y+14	; 0x0e
    24c0:	3f 85       	ldd	r19, Y+15	; 0x0f
    24c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    24c6:	f9 01       	movw	r30, r18
    24c8:	e8 0f       	add	r30, r24
    24ca:	f9 1f       	adc	r31, r25
    24cc:	80 81       	ld	r24, Z
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	c9 01       	movw	r24, r18
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	82 0f       	add	r24, r18
    24da:	93 1f       	adc	r25, r19
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	82 0f       	add	r24, r18
    24ea:	93 1f       	adc	r25, r19
    24ec:	8c 50       	subi	r24, 0x0C	; 12
    24ee:	93 40       	sbci	r25, 0x03	; 3
    24f0:	8a 57       	subi	r24, 0x7A	; 122
    24f2:	9d 4f       	sbci	r25, 0xFD	; 253
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	59 f0       	breq	.+22     	; 0x250e <GLCD_String+0x21e>
    24f8:	2e 85       	ldd	r18, Y+14	; 0x0e
    24fa:	3f 85       	ldd	r19, Y+15	; 0x0f
    24fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    24fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2500:	f9 01       	movw	r30, r18
    2502:	e8 0f       	add	r30, r24
    2504:	f9 1f       	adc	r31, r25
    2506:	80 81       	ld	r24, Z
    2508:	80 32       	cpi	r24, 0x20	; 32
    250a:	09 f0       	breq	.+2      	; 0x250e <GLCD_String+0x21e>
    250c:	76 c0       	rjmp	.+236    	; 0x25fa <GLCD_String+0x30a>
		{
			for(column=0; column<FontWidth; column++)
    250e:	1a 86       	std	Y+10, r1	; 0x0a
    2510:	19 86       	std	Y+9, r1	; 0x09
    2512:	6c c0       	rjmp	.+216    	; 0x25ec <GLCD_String+0x2fc>
			{
				GLCD_Data(font[str[i]-32][column]);
    2514:	2e 85       	ldd	r18, Y+14	; 0x0e
    2516:	3f 85       	ldd	r19, Y+15	; 0x0f
    2518:	8b 85       	ldd	r24, Y+11	; 0x0b
    251a:	9c 85       	ldd	r25, Y+12	; 0x0c
    251c:	f9 01       	movw	r30, r18
    251e:	e8 0f       	add	r30, r24
    2520:	f9 1f       	adc	r31, r25
    2522:	80 81       	ld	r24, Z
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 01       	movw	r18, r24
    252a:	20 52       	subi	r18, 0x20	; 32
    252c:	30 40       	sbci	r19, 0x00	; 0
    252e:	49 85       	ldd	r20, Y+9	; 0x09
    2530:	5a 85       	ldd	r21, Y+10	; 0x0a
    2532:	c9 01       	movw	r24, r18
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	82 0f       	add	r24, r18
    253e:	93 1f       	adc	r25, r19
    2540:	84 0f       	add	r24, r20
    2542:	95 1f       	adc	r25, r21
    2544:	fc 01       	movw	r30, r24
    2546:	ea 57       	subi	r30, 0x7A	; 122
    2548:	fd 4f       	sbci	r31, 0xFD	; 253
    254a:	80 81       	ld	r24, Z
    254c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <GLCD_Data>
				if((Y_address+1)%64==0)
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	8f 73       	andi	r24, 0x3F	; 63
    2558:	90 70       	andi	r25, 0x00	; 0
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	e9 f5       	brne	.+122    	; 0x25d8 <GLCD_String+0x2e8>
				{
					Command_Port ^= (1 << CS1);
    255e:	a5 e3       	ldi	r26, 0x35	; 53
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e5 e3       	ldi	r30, 0x35	; 53
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	90 81       	ld	r25, Z
    2568:	88 e0       	ldi	r24, 0x08	; 8
    256a:	89 27       	eor	r24, r25
    256c:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    256e:	a5 e3       	ldi	r26, 0x35	; 53
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e5 e3       	ldi	r30, 0x35	; 53
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	90 81       	ld	r25, Z
    2578:	80 e1       	ldi	r24, 0x10	; 16
    257a:	89 27       	eor	r24, r25
    257c:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    257e:	8f 81       	ldd	r24, Y+7	; 0x07
    2580:	98 85       	ldd	r25, Y+8	; 0x08
    2582:	cc 01       	movw	r24, r24
    2584:	a0 e0       	ldi	r26, 0x00	; 0
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	29 81       	ldd	r18, Y+1	; 0x01
    259a:	3a 81       	ldd	r19, Y+2	; 0x02
    259c:	4b 81       	ldd	r20, Y+3	; 0x03
    259e:	5c 81       	ldd	r21, Y+4	; 0x04
    25a0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    25b8:	69 81       	ldd	r22, Y+1	; 0x01
    25ba:	7a 81       	ldd	r23, Y+2	; 0x02
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	9c 81       	ldd	r25, Y+4	; 0x04
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	ab 83       	std	Y+3, r26	; 0x03
    25d6:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	01 96       	adiw	r24, 0x01	; 1
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	9a 87       	std	Y+10, r25	; 0x0a
    25ea:	89 87       	std	Y+9, r24	; 0x09
    25ec:	89 85       	ldd	r24, Y+9	; 0x09
    25ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f0:	85 30       	cpi	r24, 0x05	; 5
    25f2:	91 05       	cpc	r25, r1
    25f4:	08 f4       	brcc	.+2      	; 0x25f8 <GLCD_String+0x308>
    25f6:	8e cf       	rjmp	.-228    	; 0x2514 <GLCD_String+0x224>
    25f8:	c0 c0       	rjmp	.+384    	; 0x277a <GLCD_String+0x48a>
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    25fa:	1a 86       	std	Y+10, r1	; 0x0a
    25fc:	19 86       	std	Y+9, r1	; 0x09
    25fe:	6c c0       	rjmp	.+216    	; 0x26d8 <GLCD_String+0x3e8>
			{
				GLCD_Data(font[str[i]-32][column]);
    2600:	2e 85       	ldd	r18, Y+14	; 0x0e
    2602:	3f 85       	ldd	r19, Y+15	; 0x0f
    2604:	8b 85       	ldd	r24, Y+11	; 0x0b
    2606:	9c 85       	ldd	r25, Y+12	; 0x0c
    2608:	f9 01       	movw	r30, r18
    260a:	e8 0f       	add	r30, r24
    260c:	f9 1f       	adc	r31, r25
    260e:	80 81       	ld	r24, Z
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9c 01       	movw	r18, r24
    2616:	20 52       	subi	r18, 0x20	; 32
    2618:	30 40       	sbci	r19, 0x00	; 0
    261a:	49 85       	ldd	r20, Y+9	; 0x09
    261c:	5a 85       	ldd	r21, Y+10	; 0x0a
    261e:	c9 01       	movw	r24, r18
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	82 0f       	add	r24, r18
    262a:	93 1f       	adc	r25, r19
    262c:	84 0f       	add	r24, r20
    262e:	95 1f       	adc	r25, r21
    2630:	fc 01       	movw	r30, r24
    2632:	ea 57       	subi	r30, 0x7A	; 122
    2634:	fd 4f       	sbci	r31, 0xFD	; 253
    2636:	80 81       	ld	r24, Z
    2638:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <GLCD_Data>
				if((Y_address+1)%64==0)
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	01 96       	adiw	r24, 0x01	; 1
    2642:	8f 73       	andi	r24, 0x3F	; 63
    2644:	90 70       	andi	r25, 0x00	; 0
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	e9 f5       	brne	.+122    	; 0x26c4 <GLCD_String+0x3d4>
				{
					Command_Port ^= (1 << CS1);
    264a:	a5 e3       	ldi	r26, 0x35	; 53
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e5 e3       	ldi	r30, 0x35	; 53
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	90 81       	ld	r25, Z
    2654:	88 e0       	ldi	r24, 0x08	; 8
    2656:	89 27       	eor	r24, r25
    2658:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    265a:	a5 e3       	ldi	r26, 0x35	; 53
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e5 e3       	ldi	r30, 0x35	; 53
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	90 81       	ld	r25, Z
    2664:	80 e1       	ldi	r24, 0x10	; 16
    2666:	89 27       	eor	r24, r25
    2668:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    266a:	8f 81       	ldd	r24, Y+7	; 0x07
    266c:	98 85       	ldd	r25, Y+8	; 0x08
    266e:	cc 01       	movw	r24, r24
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	29 81       	ldd	r18, Y+1	; 0x01
    2686:	3a 81       	ldd	r19, Y+2	; 0x02
    2688:	4b 81       	ldd	r20, Y+3	; 0x03
    268a:	5c 81       	ldd	r21, Y+4	; 0x04
    268c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    26a4:	69 81       	ldd	r22, Y+1	; 0x01
    26a6:	7a 81       	ldd	r23, Y+2	; 0x02
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	9a 83       	std	Y+2, r25	; 0x02
    26c0:	ab 83       	std	Y+3, r26	; 0x03
    26c2:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	9a 87       	std	Y+10, r25	; 0x0a
    26d6:	89 87       	std	Y+9, r24	; 0x09
    26d8:	89 85       	ldd	r24, Y+9	; 0x09
    26da:	9a 85       	ldd	r25, Y+10	; 0x0a
    26dc:	85 30       	cpi	r24, 0x05	; 5
    26de:	91 05       	cpc	r25, r1
    26e0:	08 f4       	brcc	.+2      	; 0x26e4 <GLCD_String+0x3f4>
    26e2:	8e cf       	rjmp	.-228    	; 0x2600 <GLCD_String+0x310>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <GLCD_Data>
			Y_address++;
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	9e 83       	std	Y+6, r25	; 0x06
    26f2:	8d 83       	std	Y+5, r24	; 0x05
			if((Y_address)%64 == 0)
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	8f 73       	andi	r24, 0x3F	; 63
    26fa:	90 70       	andi	r25, 0x00	; 0
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	e9 f5       	brne	.+122    	; 0x277a <GLCD_String+0x48a>
			{
				Command_Port ^= (1 << CS1);
    2700:	a5 e3       	ldi	r26, 0x35	; 53
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e5 e3       	ldi	r30, 0x35	; 53
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	90 81       	ld	r25, Z
    270a:	88 e0       	ldi	r24, 0x08	; 8
    270c:	89 27       	eor	r24, r25
    270e:	8c 93       	st	X, r24
				Command_Port ^= (1 << CS2);
    2710:	a5 e3       	ldi	r26, 0x35	; 53
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e5 e3       	ldi	r30, 0x35	; 53
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	90 81       	ld	r25, Z
    271a:	80 e1       	ldi	r24, 0x10	; 16
    271c:	89 27       	eor	r24, r25
    271e:	8c 93       	st	X, r24
				GLCD_Command((Page+Page_inc));
    2720:	8f 81       	ldd	r24, Y+7	; 0x07
    2722:	98 85       	ldd	r25, Y+8	; 0x08
    2724:	cc 01       	movw	r24, r24
    2726:	a0 e0       	ldi	r26, 0x00	; 0
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	29 81       	ldd	r18, Y+1	; 0x01
    273c:	3a 81       	ldd	r19, Y+2	; 0x02
    273e:	4b 81       	ldd	r20, Y+3	; 0x03
    2740:	5c 81       	ldd	r21, Y+4	; 0x04
    2742:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
				Page_inc = Page_inc + 0.5;
    275a:	69 81       	ldd	r22, Y+1	; 0x01
    275c:	7a 81       	ldd	r23, Y+2	; 0x02
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	5f e3       	ldi	r21, 0x3F	; 63
    276a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	9a 83       	std	Y+2, r25	; 0x02
    2776:	ab 83       	std	Y+3, r26	; 0x03
    2778:	bc 83       	std	Y+4, r27	; 0x04
     //write in the left 
	Command_Port |= (1 << CS1);	/* Select Left half of display */
	Command_Port &= ~(1 << CS2);

	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    277a:	8b 85       	ldd	r24, Y+11	; 0x0b
    277c:	9c 85       	ldd	r25, Y+12	; 0x0c
    277e:	01 96       	adiw	r24, 0x01	; 1
    2780:	9c 87       	std	Y+12, r25	; 0x0c
    2782:	8b 87       	std	Y+11, r24	; 0x0b
    2784:	2e 85       	ldd	r18, Y+14	; 0x0e
    2786:	3f 85       	ldd	r19, Y+15	; 0x0f
    2788:	8b 85       	ldd	r24, Y+11	; 0x0b
    278a:	9c 85       	ldd	r25, Y+12	; 0x0c
    278c:	f9 01       	movw	r30, r18
    278e:	e8 0f       	add	r30, r24
    2790:	f9 1f       	adc	r31, r25
    2792:	80 81       	ld	r24, Z
    2794:	88 23       	and	r24, r24
    2796:	09 f0       	breq	.+2      	; 0x279a <GLCD_String+0x4aa>
    2798:	df cd       	rjmp	.-1090   	; 0x2358 <GLCD_String+0x68>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);	/* Set Y address (column=0) */
    279a:	80 e4       	ldi	r24, 0x40	; 64
    279c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GLCD_Command>
}
    27a0:	2f 96       	adiw	r28, 0x0f	; 15
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	08 95       	ret

000027b6 <intToAscii>:


// Function to convert an integer to a string
void intToAscii(int num, char* buffer, int bufferSize) {
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <intToAscii+0x6>
    27bc:	00 d0       	rcall	.+0      	; 0x27be <intToAscii+0x8>
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <intToAscii+0xa>
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	7c 83       	std	Y+4, r23	; 0x04
    27ca:	6b 83       	std	Y+3, r22	; 0x03
    27cc:	5e 83       	std	Y+6, r21	; 0x06
    27ce:	4d 83       	std	Y+5, r20	; 0x05
    snprintf(buffer, bufferSize, "%d", num);
    27d0:	2d 81       	ldd	r18, Y+5	; 0x05
    27d2:	3e 81       	ldd	r19, Y+6	; 0x06
    27d4:	8d b7       	in	r24, 0x3d	; 61
    27d6:	9e b7       	in	r25, 0x3e	; 62
    27d8:	08 97       	sbiw	r24, 0x08	; 8
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	9e bf       	out	0x3e, r25	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	8d bf       	out	0x3d, r24	; 61
    27e4:	ed b7       	in	r30, 0x3d	; 61
    27e6:	fe b7       	in	r31, 0x3e	; 62
    27e8:	31 96       	adiw	r30, 0x01	; 1
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	33 83       	std	Z+3, r19	; 0x03
    27f4:	22 83       	std	Z+2, r18	; 0x02
    27f6:	80 e6       	ldi	r24, 0x60	; 96
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	95 83       	std	Z+5, r25	; 0x05
    27fc:	84 83       	std	Z+4, r24	; 0x04
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	97 83       	std	Z+7, r25	; 0x07
    2804:	86 83       	std	Z+6, r24	; 0x06
    2806:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <snprintf>
    280a:	8d b7       	in	r24, 0x3d	; 61
    280c:	9e b7       	in	r25, 0x3e	; 62
    280e:	08 96       	adiw	r24, 0x08	; 8
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	9e bf       	out	0x3e, r25	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	8d bf       	out	0x3d, r24	; 61
}
    281a:	26 96       	adiw	r28, 0x06	; 6
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <GLCD_DisplayVariable>:

// Function to display an integer variable on GLCD
void GLCD_DisplayVariable(int page_no, int variable) {
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	2e 97       	sbiw	r28, 0x0e	; 14
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	9c 87       	std	Y+12, r25	; 0x0c
    2842:	8b 87       	std	Y+11, r24	; 0x0b
    2844:	7e 87       	std	Y+14, r23	; 0x0e
    2846:	6d 87       	std	Y+13, r22	; 0x0d
    char buffer[10];  // Adjust the buffer size based on the maximum expected digits in your variable
    intToAscii(variable, buffer, sizeof(buffer));
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	9e 01       	movw	r18, r28
    284e:	2f 5f       	subi	r18, 0xFF	; 255
    2850:	3f 4f       	sbci	r19, 0xFF	; 255
    2852:	b9 01       	movw	r22, r18
    2854:	4a e0       	ldi	r20, 0x0A	; 10
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	0e 94 db 13 	call	0x27b6	; 0x27b6 <intToAscii>
    GLCD_String(page_no,          buffer);
    285c:	8b 85       	ldd	r24, Y+11	; 0x0b
    285e:	9e 01       	movw	r18, r28
    2860:	2f 5f       	subi	r18, 0xFF	; 255
    2862:	3f 4f       	sbci	r19, 0xFF	; 255
    2864:	b9 01       	movw	r22, r18
    2866:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
}
    286a:	2e 96       	adiw	r28, 0x0e	; 14
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <main>:




int main(void)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
	/* pin OC0 output for HW PWM*/

	DIO_enuSetPinDirection(DIO_GROUP_B,DIO_PIN_3,DIO_OUTPUT );
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	63 e0       	ldi	r22, 0x03	; 3
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 5f 0a 	call	0x14be	; 0x14be <DIO_enuSetPinDirection>
	/* INT0 pin input*/
	DIO_enuSetPinDirection(DIO_GROUP_D,DIO_PIN_2,DIO_INPUT);
    288e:	83 e0       	ldi	r24, 0x03	; 3
    2890:	62 e0       	ldi	r22, 0x02	; 2
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 5f 0a 	call	0x14be	; 0x14be <DIO_enuSetPinDirection>
	//DIO_u8SetPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
	EXTI_voidPeripheralINTEnable(EXTI_INT0,EXTI_SENSE_RISING_EGDE);
    2898:	86 e0       	ldi	r24, 0x06	; 6
    289a:	62 e0       	ldi	r22, 0x02	; 2
    289c:	0e 94 65 08 	call	0x10ca	; 0x10ca <EXTI_voidPeripheralINTEnable>
	EXTI_callBackFunc_INT0(&SW_ICU);
    28a0:	8e ec       	ldi	r24, 0xCE	; 206
    28a2:	94 e1       	ldi	r25, 0x14	; 20
    28a4:	0e 94 96 09 	call	0x132c	; 0x132c <EXTI_callBackFunc_INT0>



	 GLCD_Init();
    28a8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <GLCD_Init>
	 
	/*TIMERS INIT*/
	TIMER0_voidInit(); 
    28ac:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER0_voidInit>
	TIMER1_voidInit(); 
    28b0:	0e 94 7b 07 	call	0xef6	; 0xef6 <TIMER1_voidInit>

/*GIE*/

GIE_vidEnable();
    28b4:	0e 94 49 08 	call	0x1092	; 0x1092 <GIE_vidEnable>

    GLCD_String(0," periodTick=         ");
    28b8:	23 e6       	ldi	r18, 0x63	; 99
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	b9 01       	movw	r22, r18
    28c0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
    GLCD_DisplayVariable(1,SWICU_u16PeriodTicks*0.5);
    28c4:	80 91 70 04 	lds	r24, 0x0470
    28c8:	90 91 71 04 	lds	r25, 0x0471
    28cc:	cc 01       	movw	r24, r24
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9c 01       	movw	r18, r24
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	b9 01       	movw	r22, r18
    2906:	0e 94 16 14 	call	0x282c	; 0x282c <GLCD_DisplayVariable>
   // GLCD_String(0,"FREQ");
//	GLCD_DisplayVariable(1,FREQ);
    //GLCD_DisplayVariable(1,SWICU_u16PeriodTicks*0.5);
	GLCD_String(2," Duty Cycle %          ");
    290a:	29 e7       	ldi	r18, 0x79	; 121
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	82 e0       	ldi	r24, 0x02	; 2
    2910:	b9 01       	movw	r22, r18
    2912:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
	GLCD_DisplayVariable(3,SWICU_u16OnTicks*0.5);
    2916:	80 91 74 04 	lds	r24, 0x0474
    291a:	90 91 75 04 	lds	r25, 0x0475
    291e:	cc 01       	movw	r24, r24
    2920:	a0 e0       	ldi	r26, 0x00	; 0
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e0       	ldi	r20, 0x00	; 0
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9c 01       	movw	r18, r24
    2952:	83 e0       	ldi	r24, 0x03	; 3
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	b9 01       	movw	r22, r18
    2958:	0e 94 16 14 	call	0x282c	; 0x282c <GLCD_DisplayVariable>

	while (1)
	{
		

		 PWM_draw(SWICU_u16OnTicks*0.5);
    295c:	80 91 74 04 	lds	r24, 0x0474
    2960:	90 91 75 04 	lds	r25, 0x0475
    2964:	cc 01       	movw	r24, r24
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e0       	ldi	r20, 0x00	; 0
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	0e 94 10 15 	call	0x2a20	; 0x2a20 <PWM_draw>
    299a:	e0 cf       	rjmp	.-64     	; 0x295c <main+0xe0>

0000299c <SW_ICU>:
	
	
}

void SW_ICU(void)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62

	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    29a4:	80 91 76 04 	lds	r24, 0x0476
    29a8:	90 91 77 04 	lds	r25, 0x0477
    29ac:	01 96       	adiw	r24, 0x01	; 1
    29ae:	90 93 77 04 	sts	0x0477, r25
    29b2:	80 93 76 04 	sts	0x0476, r24
	if(Local_u16Counter == 1)
    29b6:	80 91 76 04 	lds	r24, 0x0476
    29ba:	90 91 77 04 	lds	r25, 0x0477
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	91 05       	cpc	r25, r1
    29c2:	21 f4       	brne	.+8      	; 0x29cc <SW_ICU+0x30>
	{
		TIMER1_voidSetTimerValue(0);
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	0e 94 c0 07 	call	0xf80	; 0xf80 <TIMER1_voidSetTimerValue>
	}
	if(Local_u16Counter == 2)
    29cc:	80 91 76 04 	lds	r24, 0x0476
    29d0:	90 91 77 04 	lds	r25, 0x0477
    29d4:	82 30       	cpi	r24, 0x02	; 2
    29d6:	91 05       	cpc	r25, r1
    29d8:	51 f4       	brne	.+20     	; 0x29ee <SW_ICU+0x52>
	{
		SWICU_u16PeriodTicks=TIMER1_voidgetTimerValue();
    29da:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <TIMER1_voidgetTimerValue>
    29de:	90 93 71 04 	sts	0x0471, r25
    29e2:	80 93 70 04 	sts	0x0470, r24

		EXTI_voidPeripheralINTEnable(EXTI_INT0,EXTI_SENSE_FALLING_EDGE);
    29e6:	86 e0       	ldi	r24, 0x06	; 6
    29e8:	61 e0       	ldi	r22, 0x01	; 1
    29ea:	0e 94 65 08 	call	0x10ca	; 0x10ca <EXTI_voidPeripheralINTEnable>
		
	}
	if(Local_u16Counter == 3)
    29ee:	80 91 76 04 	lds	r24, 0x0476
    29f2:	90 91 77 04 	lds	r25, 0x0477
    29f6:	83 30       	cpi	r24, 0x03	; 3
    29f8:	91 05       	cpc	r25, r1
    29fa:	79 f4       	brne	.+30     	; 0x2a1a <SW_ICU+0x7e>
	{
		SWICU_u16OnTicks=TIMER1_voidgetTimerValue()-SWICU_u16PeriodTicks;
    29fc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <TIMER1_voidgetTimerValue>
    2a00:	20 91 70 04 	lds	r18, 0x0470
    2a04:	30 91 71 04 	lds	r19, 0x0471
    2a08:	82 1b       	sub	r24, r18
    2a0a:	93 0b       	sbc	r25, r19
    2a0c:	90 93 75 04 	sts	0x0475, r25
    2a10:	80 93 74 04 	sts	0x0474, r24
		EXTI_voidPeripheralINTDisbale(EXTI_INT0);
    2a14:	86 e0       	ldi	r24, 0x06	; 6
    2a16:	0e 94 78 09 	call	0x12f0	; 0x12f0 <EXTI_voidPeripheralINTDisbale>

		//Local_u16Counter=0;
	}

}
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <PWM_draw>:

void PWM_draw(u8 duty)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	0f 92       	push	r0
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	89 83       	std	Y+1, r24	; 0x01

	if(duty<20)
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	84 31       	cpi	r24, 0x14	; 20
    2a30:	98 f4       	brcc	.+38     	; 0x2a58 <PWM_draw+0x38>

	{
		GLCD_String(4, "-");
    2a32:	21 e9       	ldi	r18, 0x91	; 145
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	84 e0       	ldi	r24, 0x04	; 4
    2a38:	b9 01       	movw	r22, r18
    2a3a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(5, " |");
    2a3e:	23 e9       	ldi	r18, 0x93	; 147
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	85 e0       	ldi	r24, 0x05	; 5
    2a44:	b9 01       	movw	r22, r18
    2a46:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(6, "  ---------");
    2a4a:	26 e9       	ldi	r18, 0x96	; 150
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	86 e0       	ldi	r24, 0x06	; 6
    2a50:	b9 01       	movw	r22, r18
    2a52:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
    2a56:	c4 c0       	rjmp	.+392    	; 0x2be0 <PWM_draw+0x1c0>

	}

	else if(duty>=20 && duty< 30)
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	84 31       	cpi	r24, 0x14	; 20
    2a5c:	b0 f0       	brcs	.+44     	; 0x2a8a <PWM_draw+0x6a>
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	8e 31       	cpi	r24, 0x1E	; 30
    2a62:	98 f4       	brcc	.+38     	; 0x2a8a <PWM_draw+0x6a>
	{

		GLCD_String(4, "--");
    2a64:	22 ea       	ldi	r18, 0xA2	; 162
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	84 e0       	ldi	r24, 0x04	; 4
    2a6a:	b9 01       	movw	r22, r18
    2a6c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(5, "  |");
    2a70:	25 ea       	ldi	r18, 0xA5	; 165
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	85 e0       	ldi	r24, 0x05	; 5
    2a76:	b9 01       	movw	r22, r18
    2a78:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(6, "   --------");
    2a7c:	29 ea       	ldi	r18, 0xA9	; 169
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	86 e0       	ldi	r24, 0x06	; 6
    2a82:	b9 01       	movw	r22, r18
    2a84:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
    2a88:	ab c0       	rjmp	.+342    	; 0x2be0 <PWM_draw+0x1c0>

	}

	else if(duty>=30 && duty< 40)
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	8e 31       	cpi	r24, 0x1E	; 30
    2a8e:	b0 f0       	brcs	.+44     	; 0x2abc <PWM_draw+0x9c>
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	88 32       	cpi	r24, 0x28	; 40
    2a94:	98 f4       	brcc	.+38     	; 0x2abc <PWM_draw+0x9c>
	{
		GLCD_String(4, "---");
    2a96:	25 eb       	ldi	r18, 0xB5	; 181
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	84 e0       	ldi	r24, 0x04	; 4
    2a9c:	b9 01       	movw	r22, r18
    2a9e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(5, "   |");
    2aa2:	29 eb       	ldi	r18, 0xB9	; 185
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	85 e0       	ldi	r24, 0x05	; 5
    2aa8:	b9 01       	movw	r22, r18
    2aaa:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(6, "    -------");
    2aae:	2e eb       	ldi	r18, 0xBE	; 190
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	86 e0       	ldi	r24, 0x06	; 6
    2ab4:	b9 01       	movw	r22, r18
    2ab6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
    2aba:	92 c0       	rjmp	.+292    	; 0x2be0 <PWM_draw+0x1c0>

	}

	else if(duty>=40 && duty< 50)
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	88 32       	cpi	r24, 0x28	; 40
    2ac0:	b0 f0       	brcs	.+44     	; 0x2aee <PWM_draw+0xce>
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	82 33       	cpi	r24, 0x32	; 50
    2ac6:	98 f4       	brcc	.+38     	; 0x2aee <PWM_draw+0xce>
	{
		GLCD_String(4, "----");
    2ac8:	2a ec       	ldi	r18, 0xCA	; 202
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	84 e0       	ldi	r24, 0x04	; 4
    2ace:	b9 01       	movw	r22, r18
    2ad0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(5, "    |");
    2ad4:	2f ec       	ldi	r18, 0xCF	; 207
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	85 e0       	ldi	r24, 0x05	; 5
    2ada:	b9 01       	movw	r22, r18
    2adc:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(6, "     ------");
    2ae0:	25 ed       	ldi	r18, 0xD5	; 213
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	86 e0       	ldi	r24, 0x06	; 6
    2ae6:	b9 01       	movw	r22, r18
    2ae8:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
    2aec:	79 c0       	rjmp	.+242    	; 0x2be0 <PWM_draw+0x1c0>

	}

	else if(duty>=50 && duty< 60)
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	82 33       	cpi	r24, 0x32	; 50
    2af2:	b0 f0       	brcs	.+44     	; 0x2b20 <PWM_draw+0x100>
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	8c 33       	cpi	r24, 0x3C	; 60
    2af8:	98 f4       	brcc	.+38     	; 0x2b20 <PWM_draw+0x100>
	{
		GLCD_String(4, "-----");
    2afa:	21 ee       	ldi	r18, 0xE1	; 225
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	84 e0       	ldi	r24, 0x04	; 4
    2b00:	b9 01       	movw	r22, r18
    2b02:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(5, "     |");
    2b06:	27 ee       	ldi	r18, 0xE7	; 231
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	85 e0       	ldi	r24, 0x05	; 5
    2b0c:	b9 01       	movw	r22, r18
    2b0e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(6, "      -----");
    2b12:	2e ee       	ldi	r18, 0xEE	; 238
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	86 e0       	ldi	r24, 0x06	; 6
    2b18:	b9 01       	movw	r22, r18
    2b1a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
    2b1e:	60 c0       	rjmp	.+192    	; 0x2be0 <PWM_draw+0x1c0>

	}

	else if(duty>=60 && duty< 70)
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	8c 33       	cpi	r24, 0x3C	; 60
    2b24:	b0 f0       	brcs	.+44     	; 0x2b52 <PWM_draw+0x132>
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	86 34       	cpi	r24, 0x46	; 70
    2b2a:	98 f4       	brcc	.+38     	; 0x2b52 <PWM_draw+0x132>
	{
		GLCD_String(4, "------");
    2b2c:	2a ef       	ldi	r18, 0xFA	; 250
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	84 e0       	ldi	r24, 0x04	; 4
    2b32:	b9 01       	movw	r22, r18
    2b34:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(5, "      |");
    2b38:	21 e0       	ldi	r18, 0x01	; 1
    2b3a:	31 e0       	ldi	r19, 0x01	; 1
    2b3c:	85 e0       	ldi	r24, 0x05	; 5
    2b3e:	b9 01       	movw	r22, r18
    2b40:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(6, "       ----");
    2b44:	29 e0       	ldi	r18, 0x09	; 9
    2b46:	31 e0       	ldi	r19, 0x01	; 1
    2b48:	86 e0       	ldi	r24, 0x06	; 6
    2b4a:	b9 01       	movw	r22, r18
    2b4c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
    2b50:	47 c0       	rjmp	.+142    	; 0x2be0 <PWM_draw+0x1c0>

	}

	else if(duty>=70 && duty< 80)
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	86 34       	cpi	r24, 0x46	; 70
    2b56:	b0 f0       	brcs	.+44     	; 0x2b84 <PWM_draw+0x164>
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	80 35       	cpi	r24, 0x50	; 80
    2b5c:	98 f4       	brcc	.+38     	; 0x2b84 <PWM_draw+0x164>
	{
		GLCD_String(4, "-------");
    2b5e:	25 e1       	ldi	r18, 0x15	; 21
    2b60:	31 e0       	ldi	r19, 0x01	; 1
    2b62:	84 e0       	ldi	r24, 0x04	; 4
    2b64:	b9 01       	movw	r22, r18
    2b66:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(5, "       |");
    2b6a:	2d e1       	ldi	r18, 0x1D	; 29
    2b6c:	31 e0       	ldi	r19, 0x01	; 1
    2b6e:	85 e0       	ldi	r24, 0x05	; 5
    2b70:	b9 01       	movw	r22, r18
    2b72:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(6, "        ---");
    2b76:	26 e2       	ldi	r18, 0x26	; 38
    2b78:	31 e0       	ldi	r19, 0x01	; 1
    2b7a:	86 e0       	ldi	r24, 0x06	; 6
    2b7c:	b9 01       	movw	r22, r18
    2b7e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
    2b82:	2e c0       	rjmp	.+92     	; 0x2be0 <PWM_draw+0x1c0>

	}

	else if(duty>=80 && duty< 90)
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	80 35       	cpi	r24, 0x50	; 80
    2b88:	b0 f0       	brcs	.+44     	; 0x2bb6 <PWM_draw+0x196>
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	8a 35       	cpi	r24, 0x5A	; 90
    2b8e:	98 f4       	brcc	.+38     	; 0x2bb6 <PWM_draw+0x196>
	{
		GLCD_String(4, "--------");
    2b90:	22 e3       	ldi	r18, 0x32	; 50
    2b92:	31 e0       	ldi	r19, 0x01	; 1
    2b94:	84 e0       	ldi	r24, 0x04	; 4
    2b96:	b9 01       	movw	r22, r18
    2b98:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(5, "        |");
    2b9c:	2b e3       	ldi	r18, 0x3B	; 59
    2b9e:	31 e0       	ldi	r19, 0x01	; 1
    2ba0:	85 e0       	ldi	r24, 0x05	; 5
    2ba2:	b9 01       	movw	r22, r18
    2ba4:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(6, "         --");
    2ba8:	25 e4       	ldi	r18, 0x45	; 69
    2baa:	31 e0       	ldi	r19, 0x01	; 1
    2bac:	86 e0       	ldi	r24, 0x06	; 6
    2bae:	b9 01       	movw	r22, r18
    2bb0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
    2bb4:	15 c0       	rjmp	.+42     	; 0x2be0 <PWM_draw+0x1c0>
	}

	else if(duty>=90 )
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	8a 35       	cpi	r24, 0x5A	; 90
    2bba:	90 f0       	brcs	.+36     	; 0x2be0 <PWM_draw+0x1c0>
	{
		GLCD_String(4, "---------     ");
    2bbc:	21 e5       	ldi	r18, 0x51	; 81
    2bbe:	31 e0       	ldi	r19, 0x01	; 1
    2bc0:	84 e0       	ldi	r24, 0x04	; 4
    2bc2:	b9 01       	movw	r22, r18
    2bc4:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(5, "          |   ");
    2bc8:	20 e6       	ldi	r18, 0x60	; 96
    2bca:	31 e0       	ldi	r19, 0x01	; 1
    2bcc:	85 e0       	ldi	r24, 0x05	; 5
    2bce:	b9 01       	movw	r22, r18
    2bd0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>
		GLCD_String(6, "           -  ");
    2bd4:	2f e6       	ldi	r18, 0x6F	; 111
    2bd6:	31 e0       	ldi	r19, 0x01	; 1
    2bd8:	86 e0       	ldi	r24, 0x06	; 6
    2bda:	b9 01       	movw	r22, r18
    2bdc:	0e 94 78 11 	call	0x22f0	; 0x22f0 <GLCD_String>

	}

}
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <__prologue_saves__>:
    2be8:	2f 92       	push	r2
    2bea:	3f 92       	push	r3
    2bec:	4f 92       	push	r4
    2bee:	5f 92       	push	r5
    2bf0:	6f 92       	push	r6
    2bf2:	7f 92       	push	r7
    2bf4:	8f 92       	push	r8
    2bf6:	9f 92       	push	r9
    2bf8:	af 92       	push	r10
    2bfa:	bf 92       	push	r11
    2bfc:	cf 92       	push	r12
    2bfe:	df 92       	push	r13
    2c00:	ef 92       	push	r14
    2c02:	ff 92       	push	r15
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	ca 1b       	sub	r28, r26
    2c12:	db 0b       	sbc	r29, r27
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	09 94       	ijmp

00002c20 <__epilogue_restores__>:
    2c20:	2a 88       	ldd	r2, Y+18	; 0x12
    2c22:	39 88       	ldd	r3, Y+17	; 0x11
    2c24:	48 88       	ldd	r4, Y+16	; 0x10
    2c26:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c28:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c30:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c32:	b9 84       	ldd	r11, Y+9	; 0x09
    2c34:	c8 84       	ldd	r12, Y+8	; 0x08
    2c36:	df 80       	ldd	r13, Y+7	; 0x07
    2c38:	ee 80       	ldd	r14, Y+6	; 0x06
    2c3a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c3c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c3e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c40:	aa 81       	ldd	r26, Y+2	; 0x02
    2c42:	b9 81       	ldd	r27, Y+1	; 0x01
    2c44:	ce 0f       	add	r28, r30
    2c46:	d1 1d       	adc	r29, r1
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	ed 01       	movw	r28, r26
    2c54:	08 95       	ret

00002c56 <snprintf>:
    2c56:	ae e0       	ldi	r26, 0x0E	; 14
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e1 e3       	ldi	r30, 0x31	; 49
    2c5c:	f6 e1       	ldi	r31, 0x16	; 22
    2c5e:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__prologue_saves__+0x1c>
    2c62:	0d 89       	ldd	r16, Y+21	; 0x15
    2c64:	1e 89       	ldd	r17, Y+22	; 0x16
    2c66:	8f 89       	ldd	r24, Y+23	; 0x17
    2c68:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6a:	97 ff       	sbrs	r25, 7
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <snprintf+0x1c>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e8       	ldi	r25, 0x80	; 128
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
    2c78:	1a 83       	std	Y+2, r17	; 0x02
    2c7a:	09 83       	std	Y+1, r16	; 0x01
    2c7c:	86 e0       	ldi	r24, 0x06	; 6
    2c7e:	8c 83       	std	Y+4, r24	; 0x04
    2c80:	9e 01       	movw	r18, r28
    2c82:	25 5e       	subi	r18, 0xE5	; 229
    2c84:	3f 4f       	sbci	r19, 0xFF	; 255
    2c86:	ce 01       	movw	r24, r28
    2c88:	01 96       	adiw	r24, 0x01	; 1
    2c8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8e:	a9 01       	movw	r20, r18
    2c90:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <vfprintf>
    2c94:	4d 81       	ldd	r20, Y+5	; 0x05
    2c96:	5e 81       	ldd	r21, Y+6	; 0x06
    2c98:	57 fd       	sbrc	r21, 7
    2c9a:	0a c0       	rjmp	.+20     	; 0x2cb0 <snprintf+0x5a>
    2c9c:	2f 81       	ldd	r18, Y+7	; 0x07
    2c9e:	38 85       	ldd	r19, Y+8	; 0x08
    2ca0:	42 17       	cp	r20, r18
    2ca2:	53 07       	cpc	r21, r19
    2ca4:	0c f4       	brge	.+2      	; 0x2ca8 <snprintf+0x52>
    2ca6:	9a 01       	movw	r18, r20
    2ca8:	02 0f       	add	r16, r18
    2caa:	13 1f       	adc	r17, r19
    2cac:	f8 01       	movw	r30, r16
    2cae:	10 82       	st	Z, r1
    2cb0:	2e 96       	adiw	r28, 0x0e	; 14
    2cb2:	e4 e0       	ldi	r30, 0x04	; 4
    2cb4:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__epilogue_restores__+0x1c>

00002cb8 <vfprintf>:
    2cb8:	ab e0       	ldi	r26, 0x0B	; 11
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e2 e6       	ldi	r30, 0x62	; 98
    2cbe:	f6 e1       	ldi	r31, 0x16	; 22
    2cc0:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__>
    2cc4:	3c 01       	movw	r6, r24
    2cc6:	2b 01       	movw	r4, r22
    2cc8:	5a 01       	movw	r10, r20
    2cca:	fc 01       	movw	r30, r24
    2ccc:	17 82       	std	Z+7, r1	; 0x07
    2cce:	16 82       	std	Z+6, r1	; 0x06
    2cd0:	83 81       	ldd	r24, Z+3	; 0x03
    2cd2:	81 fd       	sbrc	r24, 1
    2cd4:	03 c0       	rjmp	.+6      	; 0x2cdc <vfprintf+0x24>
    2cd6:	6f ef       	ldi	r22, 0xFF	; 255
    2cd8:	7f ef       	ldi	r23, 0xFF	; 255
    2cda:	c6 c1       	rjmp	.+908    	; 0x3068 <vfprintf+0x3b0>
    2cdc:	9a e0       	ldi	r25, 0x0A	; 10
    2cde:	89 2e       	mov	r8, r25
    2ce0:	1e 01       	movw	r2, r28
    2ce2:	08 94       	sec
    2ce4:	21 1c       	adc	r2, r1
    2ce6:	31 1c       	adc	r3, r1
    2ce8:	f3 01       	movw	r30, r6
    2cea:	23 81       	ldd	r18, Z+3	; 0x03
    2cec:	f2 01       	movw	r30, r4
    2cee:	23 fd       	sbrc	r18, 3
    2cf0:	85 91       	lpm	r24, Z+
    2cf2:	23 ff       	sbrs	r18, 3
    2cf4:	81 91       	ld	r24, Z+
    2cf6:	2f 01       	movw	r4, r30
    2cf8:	88 23       	and	r24, r24
    2cfa:	09 f4       	brne	.+2      	; 0x2cfe <vfprintf+0x46>
    2cfc:	b2 c1       	rjmp	.+868    	; 0x3062 <vfprintf+0x3aa>
    2cfe:	85 32       	cpi	r24, 0x25	; 37
    2d00:	39 f4       	brne	.+14     	; 0x2d10 <vfprintf+0x58>
    2d02:	23 fd       	sbrc	r18, 3
    2d04:	85 91       	lpm	r24, Z+
    2d06:	23 ff       	sbrs	r18, 3
    2d08:	81 91       	ld	r24, Z+
    2d0a:	2f 01       	movw	r4, r30
    2d0c:	85 32       	cpi	r24, 0x25	; 37
    2d0e:	29 f4       	brne	.+10     	; 0x2d1a <vfprintf+0x62>
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	b3 01       	movw	r22, r6
    2d14:	0e 94 4f 18 	call	0x309e	; 0x309e <fputc>
    2d18:	e7 cf       	rjmp	.-50     	; 0x2ce8 <vfprintf+0x30>
    2d1a:	98 2f       	mov	r25, r24
    2d1c:	ff 24       	eor	r15, r15
    2d1e:	ee 24       	eor	r14, r14
    2d20:	99 24       	eor	r9, r9
    2d22:	ff e1       	ldi	r31, 0x1F	; 31
    2d24:	ff 15       	cp	r31, r15
    2d26:	d0 f0       	brcs	.+52     	; 0x2d5c <vfprintf+0xa4>
    2d28:	9b 32       	cpi	r25, 0x2B	; 43
    2d2a:	69 f0       	breq	.+26     	; 0x2d46 <vfprintf+0x8e>
    2d2c:	9c 32       	cpi	r25, 0x2C	; 44
    2d2e:	28 f4       	brcc	.+10     	; 0x2d3a <vfprintf+0x82>
    2d30:	90 32       	cpi	r25, 0x20	; 32
    2d32:	59 f0       	breq	.+22     	; 0x2d4a <vfprintf+0x92>
    2d34:	93 32       	cpi	r25, 0x23	; 35
    2d36:	91 f4       	brne	.+36     	; 0x2d5c <vfprintf+0xa4>
    2d38:	0e c0       	rjmp	.+28     	; 0x2d56 <vfprintf+0x9e>
    2d3a:	9d 32       	cpi	r25, 0x2D	; 45
    2d3c:	49 f0       	breq	.+18     	; 0x2d50 <vfprintf+0x98>
    2d3e:	90 33       	cpi	r25, 0x30	; 48
    2d40:	69 f4       	brne	.+26     	; 0x2d5c <vfprintf+0xa4>
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	24 c0       	rjmp	.+72     	; 0x2d8e <vfprintf+0xd6>
    2d46:	52 e0       	ldi	r21, 0x02	; 2
    2d48:	f5 2a       	or	r15, r21
    2d4a:	84 e0       	ldi	r24, 0x04	; 4
    2d4c:	f8 2a       	or	r15, r24
    2d4e:	28 c0       	rjmp	.+80     	; 0x2da0 <vfprintf+0xe8>
    2d50:	98 e0       	ldi	r25, 0x08	; 8
    2d52:	f9 2a       	or	r15, r25
    2d54:	25 c0       	rjmp	.+74     	; 0x2da0 <vfprintf+0xe8>
    2d56:	e0 e1       	ldi	r30, 0x10	; 16
    2d58:	fe 2a       	or	r15, r30
    2d5a:	22 c0       	rjmp	.+68     	; 0x2da0 <vfprintf+0xe8>
    2d5c:	f7 fc       	sbrc	r15, 7
    2d5e:	29 c0       	rjmp	.+82     	; 0x2db2 <vfprintf+0xfa>
    2d60:	89 2f       	mov	r24, r25
    2d62:	80 53       	subi	r24, 0x30	; 48
    2d64:	8a 30       	cpi	r24, 0x0A	; 10
    2d66:	70 f4       	brcc	.+28     	; 0x2d84 <vfprintf+0xcc>
    2d68:	f6 fe       	sbrs	r15, 6
    2d6a:	05 c0       	rjmp	.+10     	; 0x2d76 <vfprintf+0xbe>
    2d6c:	98 9c       	mul	r9, r8
    2d6e:	90 2c       	mov	r9, r0
    2d70:	11 24       	eor	r1, r1
    2d72:	98 0e       	add	r9, r24
    2d74:	15 c0       	rjmp	.+42     	; 0x2da0 <vfprintf+0xe8>
    2d76:	e8 9c       	mul	r14, r8
    2d78:	e0 2c       	mov	r14, r0
    2d7a:	11 24       	eor	r1, r1
    2d7c:	e8 0e       	add	r14, r24
    2d7e:	f0 e2       	ldi	r31, 0x20	; 32
    2d80:	ff 2a       	or	r15, r31
    2d82:	0e c0       	rjmp	.+28     	; 0x2da0 <vfprintf+0xe8>
    2d84:	9e 32       	cpi	r25, 0x2E	; 46
    2d86:	29 f4       	brne	.+10     	; 0x2d92 <vfprintf+0xda>
    2d88:	f6 fc       	sbrc	r15, 6
    2d8a:	6b c1       	rjmp	.+726    	; 0x3062 <vfprintf+0x3aa>
    2d8c:	40 e4       	ldi	r20, 0x40	; 64
    2d8e:	f4 2a       	or	r15, r20
    2d90:	07 c0       	rjmp	.+14     	; 0x2da0 <vfprintf+0xe8>
    2d92:	9c 36       	cpi	r25, 0x6C	; 108
    2d94:	19 f4       	brne	.+6      	; 0x2d9c <vfprintf+0xe4>
    2d96:	50 e8       	ldi	r21, 0x80	; 128
    2d98:	f5 2a       	or	r15, r21
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <vfprintf+0xe8>
    2d9c:	98 36       	cpi	r25, 0x68	; 104
    2d9e:	49 f4       	brne	.+18     	; 0x2db2 <vfprintf+0xfa>
    2da0:	f2 01       	movw	r30, r4
    2da2:	23 fd       	sbrc	r18, 3
    2da4:	95 91       	lpm	r25, Z+
    2da6:	23 ff       	sbrs	r18, 3
    2da8:	91 91       	ld	r25, Z+
    2daa:	2f 01       	movw	r4, r30
    2dac:	99 23       	and	r25, r25
    2dae:	09 f0       	breq	.+2      	; 0x2db2 <vfprintf+0xfa>
    2db0:	b8 cf       	rjmp	.-144    	; 0x2d22 <vfprintf+0x6a>
    2db2:	89 2f       	mov	r24, r25
    2db4:	85 54       	subi	r24, 0x45	; 69
    2db6:	83 30       	cpi	r24, 0x03	; 3
    2db8:	18 f0       	brcs	.+6      	; 0x2dc0 <vfprintf+0x108>
    2dba:	80 52       	subi	r24, 0x20	; 32
    2dbc:	83 30       	cpi	r24, 0x03	; 3
    2dbe:	38 f4       	brcc	.+14     	; 0x2dce <vfprintf+0x116>
    2dc0:	44 e0       	ldi	r20, 0x04	; 4
    2dc2:	50 e0       	ldi	r21, 0x00	; 0
    2dc4:	a4 0e       	add	r10, r20
    2dc6:	b5 1e       	adc	r11, r21
    2dc8:	5f e3       	ldi	r21, 0x3F	; 63
    2dca:	59 83       	std	Y+1, r21	; 0x01
    2dcc:	0f c0       	rjmp	.+30     	; 0x2dec <vfprintf+0x134>
    2dce:	93 36       	cpi	r25, 0x63	; 99
    2dd0:	31 f0       	breq	.+12     	; 0x2dde <vfprintf+0x126>
    2dd2:	93 37       	cpi	r25, 0x73	; 115
    2dd4:	79 f0       	breq	.+30     	; 0x2df4 <vfprintf+0x13c>
    2dd6:	93 35       	cpi	r25, 0x53	; 83
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <vfprintf+0x124>
    2dda:	56 c0       	rjmp	.+172    	; 0x2e88 <vfprintf+0x1d0>
    2ddc:	20 c0       	rjmp	.+64     	; 0x2e1e <vfprintf+0x166>
    2dde:	f5 01       	movw	r30, r10
    2de0:	80 81       	ld	r24, Z
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	42 e0       	ldi	r20, 0x02	; 2
    2de6:	50 e0       	ldi	r21, 0x00	; 0
    2de8:	a4 0e       	add	r10, r20
    2dea:	b5 1e       	adc	r11, r21
    2dec:	61 01       	movw	r12, r2
    2dee:	01 e0       	ldi	r16, 0x01	; 1
    2df0:	10 e0       	ldi	r17, 0x00	; 0
    2df2:	12 c0       	rjmp	.+36     	; 0x2e18 <vfprintf+0x160>
    2df4:	f5 01       	movw	r30, r10
    2df6:	c0 80       	ld	r12, Z
    2df8:	d1 80       	ldd	r13, Z+1	; 0x01
    2dfa:	f6 fc       	sbrc	r15, 6
    2dfc:	03 c0       	rjmp	.+6      	; 0x2e04 <vfprintf+0x14c>
    2dfe:	6f ef       	ldi	r22, 0xFF	; 255
    2e00:	7f ef       	ldi	r23, 0xFF	; 255
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <vfprintf+0x150>
    2e04:	69 2d       	mov	r22, r9
    2e06:	70 e0       	ldi	r23, 0x00	; 0
    2e08:	42 e0       	ldi	r20, 0x02	; 2
    2e0a:	50 e0       	ldi	r21, 0x00	; 0
    2e0c:	a4 0e       	add	r10, r20
    2e0e:	b5 1e       	adc	r11, r21
    2e10:	c6 01       	movw	r24, r12
    2e12:	0e 94 44 18 	call	0x3088	; 0x3088 <strnlen>
    2e16:	8c 01       	movw	r16, r24
    2e18:	5f e7       	ldi	r21, 0x7F	; 127
    2e1a:	f5 22       	and	r15, r21
    2e1c:	14 c0       	rjmp	.+40     	; 0x2e46 <vfprintf+0x18e>
    2e1e:	f5 01       	movw	r30, r10
    2e20:	c0 80       	ld	r12, Z
    2e22:	d1 80       	ldd	r13, Z+1	; 0x01
    2e24:	f6 fc       	sbrc	r15, 6
    2e26:	03 c0       	rjmp	.+6      	; 0x2e2e <vfprintf+0x176>
    2e28:	6f ef       	ldi	r22, 0xFF	; 255
    2e2a:	7f ef       	ldi	r23, 0xFF	; 255
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <vfprintf+0x17a>
    2e2e:	69 2d       	mov	r22, r9
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	42 e0       	ldi	r20, 0x02	; 2
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	a4 0e       	add	r10, r20
    2e38:	b5 1e       	adc	r11, r21
    2e3a:	c6 01       	movw	r24, r12
    2e3c:	0e 94 39 18 	call	0x3072	; 0x3072 <strnlen_P>
    2e40:	8c 01       	movw	r16, r24
    2e42:	50 e8       	ldi	r21, 0x80	; 128
    2e44:	f5 2a       	or	r15, r21
    2e46:	f3 fe       	sbrs	r15, 3
    2e48:	07 c0       	rjmp	.+14     	; 0x2e58 <vfprintf+0x1a0>
    2e4a:	1a c0       	rjmp	.+52     	; 0x2e80 <vfprintf+0x1c8>
    2e4c:	80 e2       	ldi	r24, 0x20	; 32
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	b3 01       	movw	r22, r6
    2e52:	0e 94 4f 18 	call	0x309e	; 0x309e <fputc>
    2e56:	ea 94       	dec	r14
    2e58:	8e 2d       	mov	r24, r14
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	08 17       	cp	r16, r24
    2e5e:	19 07       	cpc	r17, r25
    2e60:	a8 f3       	brcs	.-22     	; 0x2e4c <vfprintf+0x194>
    2e62:	0e c0       	rjmp	.+28     	; 0x2e80 <vfprintf+0x1c8>
    2e64:	f6 01       	movw	r30, r12
    2e66:	f7 fc       	sbrc	r15, 7
    2e68:	85 91       	lpm	r24, Z+
    2e6a:	f7 fe       	sbrs	r15, 7
    2e6c:	81 91       	ld	r24, Z+
    2e6e:	6f 01       	movw	r12, r30
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	b3 01       	movw	r22, r6
    2e74:	0e 94 4f 18 	call	0x309e	; 0x309e <fputc>
    2e78:	e1 10       	cpse	r14, r1
    2e7a:	ea 94       	dec	r14
    2e7c:	01 50       	subi	r16, 0x01	; 1
    2e7e:	10 40       	sbci	r17, 0x00	; 0
    2e80:	01 15       	cp	r16, r1
    2e82:	11 05       	cpc	r17, r1
    2e84:	79 f7       	brne	.-34     	; 0x2e64 <vfprintf+0x1ac>
    2e86:	ea c0       	rjmp	.+468    	; 0x305c <vfprintf+0x3a4>
    2e88:	94 36       	cpi	r25, 0x64	; 100
    2e8a:	11 f0       	breq	.+4      	; 0x2e90 <vfprintf+0x1d8>
    2e8c:	99 36       	cpi	r25, 0x69	; 105
    2e8e:	69 f5       	brne	.+90     	; 0x2eea <vfprintf+0x232>
    2e90:	f7 fe       	sbrs	r15, 7
    2e92:	08 c0       	rjmp	.+16     	; 0x2ea4 <vfprintf+0x1ec>
    2e94:	f5 01       	movw	r30, r10
    2e96:	20 81       	ld	r18, Z
    2e98:	31 81       	ldd	r19, Z+1	; 0x01
    2e9a:	42 81       	ldd	r20, Z+2	; 0x02
    2e9c:	53 81       	ldd	r21, Z+3	; 0x03
    2e9e:	84 e0       	ldi	r24, 0x04	; 4
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0a c0       	rjmp	.+20     	; 0x2eb8 <vfprintf+0x200>
    2ea4:	f5 01       	movw	r30, r10
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	9c 01       	movw	r18, r24
    2eac:	44 27       	eor	r20, r20
    2eae:	37 fd       	sbrc	r19, 7
    2eb0:	40 95       	com	r20
    2eb2:	54 2f       	mov	r21, r20
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	a8 0e       	add	r10, r24
    2eba:	b9 1e       	adc	r11, r25
    2ebc:	9f e6       	ldi	r25, 0x6F	; 111
    2ebe:	f9 22       	and	r15, r25
    2ec0:	57 ff       	sbrs	r21, 7
    2ec2:	09 c0       	rjmp	.+18     	; 0x2ed6 <vfprintf+0x21e>
    2ec4:	50 95       	com	r21
    2ec6:	40 95       	com	r20
    2ec8:	30 95       	com	r19
    2eca:	21 95       	neg	r18
    2ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ece:	4f 4f       	sbci	r20, 0xFF	; 255
    2ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed2:	e0 e8       	ldi	r30, 0x80	; 128
    2ed4:	fe 2a       	or	r15, r30
    2ed6:	ca 01       	movw	r24, r20
    2ed8:	b9 01       	movw	r22, r18
    2eda:	a1 01       	movw	r20, r2
    2edc:	2a e0       	ldi	r18, 0x0A	; 10
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__ultoa_invert>
    2ee4:	d8 2e       	mov	r13, r24
    2ee6:	d2 18       	sub	r13, r2
    2ee8:	40 c0       	rjmp	.+128    	; 0x2f6a <vfprintf+0x2b2>
    2eea:	95 37       	cpi	r25, 0x75	; 117
    2eec:	29 f4       	brne	.+10     	; 0x2ef8 <vfprintf+0x240>
    2eee:	1f 2d       	mov	r17, r15
    2ef0:	1f 7e       	andi	r17, 0xEF	; 239
    2ef2:	2a e0       	ldi	r18, 0x0A	; 10
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	1d c0       	rjmp	.+58     	; 0x2f32 <vfprintf+0x27a>
    2ef8:	1f 2d       	mov	r17, r15
    2efa:	19 7f       	andi	r17, 0xF9	; 249
    2efc:	9f 36       	cpi	r25, 0x6F	; 111
    2efe:	61 f0       	breq	.+24     	; 0x2f18 <vfprintf+0x260>
    2f00:	90 37       	cpi	r25, 0x70	; 112
    2f02:	20 f4       	brcc	.+8      	; 0x2f0c <vfprintf+0x254>
    2f04:	98 35       	cpi	r25, 0x58	; 88
    2f06:	09 f0       	breq	.+2      	; 0x2f0a <vfprintf+0x252>
    2f08:	ac c0       	rjmp	.+344    	; 0x3062 <vfprintf+0x3aa>
    2f0a:	0f c0       	rjmp	.+30     	; 0x2f2a <vfprintf+0x272>
    2f0c:	90 37       	cpi	r25, 0x70	; 112
    2f0e:	39 f0       	breq	.+14     	; 0x2f1e <vfprintf+0x266>
    2f10:	98 37       	cpi	r25, 0x78	; 120
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <vfprintf+0x25e>
    2f14:	a6 c0       	rjmp	.+332    	; 0x3062 <vfprintf+0x3aa>
    2f16:	04 c0       	rjmp	.+8      	; 0x2f20 <vfprintf+0x268>
    2f18:	28 e0       	ldi	r18, 0x08	; 8
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	0a c0       	rjmp	.+20     	; 0x2f32 <vfprintf+0x27a>
    2f1e:	10 61       	ori	r17, 0x10	; 16
    2f20:	14 fd       	sbrc	r17, 4
    2f22:	14 60       	ori	r17, 0x04	; 4
    2f24:	20 e1       	ldi	r18, 0x10	; 16
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	04 c0       	rjmp	.+8      	; 0x2f32 <vfprintf+0x27a>
    2f2a:	14 fd       	sbrc	r17, 4
    2f2c:	16 60       	ori	r17, 0x06	; 6
    2f2e:	20 e1       	ldi	r18, 0x10	; 16
    2f30:	32 e0       	ldi	r19, 0x02	; 2
    2f32:	17 ff       	sbrs	r17, 7
    2f34:	08 c0       	rjmp	.+16     	; 0x2f46 <vfprintf+0x28e>
    2f36:	f5 01       	movw	r30, r10
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	44 e0       	ldi	r20, 0x04	; 4
    2f42:	50 e0       	ldi	r21, 0x00	; 0
    2f44:	08 c0       	rjmp	.+16     	; 0x2f56 <vfprintf+0x29e>
    2f46:	f5 01       	movw	r30, r10
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	bc 01       	movw	r22, r24
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	42 e0       	ldi	r20, 0x02	; 2
    2f54:	50 e0       	ldi	r21, 0x00	; 0
    2f56:	a4 0e       	add	r10, r20
    2f58:	b5 1e       	adc	r11, r21
    2f5a:	a1 01       	movw	r20, r2
    2f5c:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__ultoa_invert>
    2f60:	d8 2e       	mov	r13, r24
    2f62:	d2 18       	sub	r13, r2
    2f64:	8f e7       	ldi	r24, 0x7F	; 127
    2f66:	f8 2e       	mov	r15, r24
    2f68:	f1 22       	and	r15, r17
    2f6a:	f6 fe       	sbrs	r15, 6
    2f6c:	0b c0       	rjmp	.+22     	; 0x2f84 <vfprintf+0x2cc>
    2f6e:	5e ef       	ldi	r21, 0xFE	; 254
    2f70:	f5 22       	and	r15, r21
    2f72:	d9 14       	cp	r13, r9
    2f74:	38 f4       	brcc	.+14     	; 0x2f84 <vfprintf+0x2cc>
    2f76:	f4 fe       	sbrs	r15, 4
    2f78:	07 c0       	rjmp	.+14     	; 0x2f88 <vfprintf+0x2d0>
    2f7a:	f2 fc       	sbrc	r15, 2
    2f7c:	05 c0       	rjmp	.+10     	; 0x2f88 <vfprintf+0x2d0>
    2f7e:	8f ee       	ldi	r24, 0xEF	; 239
    2f80:	f8 22       	and	r15, r24
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <vfprintf+0x2d0>
    2f84:	1d 2d       	mov	r17, r13
    2f86:	01 c0       	rjmp	.+2      	; 0x2f8a <vfprintf+0x2d2>
    2f88:	19 2d       	mov	r17, r9
    2f8a:	f4 fe       	sbrs	r15, 4
    2f8c:	0d c0       	rjmp	.+26     	; 0x2fa8 <vfprintf+0x2f0>
    2f8e:	fe 01       	movw	r30, r28
    2f90:	ed 0d       	add	r30, r13
    2f92:	f1 1d       	adc	r31, r1
    2f94:	80 81       	ld	r24, Z
    2f96:	80 33       	cpi	r24, 0x30	; 48
    2f98:	19 f4       	brne	.+6      	; 0x2fa0 <vfprintf+0x2e8>
    2f9a:	99 ee       	ldi	r25, 0xE9	; 233
    2f9c:	f9 22       	and	r15, r25
    2f9e:	08 c0       	rjmp	.+16     	; 0x2fb0 <vfprintf+0x2f8>
    2fa0:	1f 5f       	subi	r17, 0xFF	; 255
    2fa2:	f2 fe       	sbrs	r15, 2
    2fa4:	05 c0       	rjmp	.+10     	; 0x2fb0 <vfprintf+0x2f8>
    2fa6:	03 c0       	rjmp	.+6      	; 0x2fae <vfprintf+0x2f6>
    2fa8:	8f 2d       	mov	r24, r15
    2faa:	86 78       	andi	r24, 0x86	; 134
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <vfprintf+0x2f8>
    2fae:	1f 5f       	subi	r17, 0xFF	; 255
    2fb0:	0f 2d       	mov	r16, r15
    2fb2:	f3 fc       	sbrc	r15, 3
    2fb4:	14 c0       	rjmp	.+40     	; 0x2fde <vfprintf+0x326>
    2fb6:	f0 fe       	sbrs	r15, 0
    2fb8:	0f c0       	rjmp	.+30     	; 0x2fd8 <vfprintf+0x320>
    2fba:	1e 15       	cp	r17, r14
    2fbc:	10 f0       	brcs	.+4      	; 0x2fc2 <vfprintf+0x30a>
    2fbe:	9d 2c       	mov	r9, r13
    2fc0:	0b c0       	rjmp	.+22     	; 0x2fd8 <vfprintf+0x320>
    2fc2:	9d 2c       	mov	r9, r13
    2fc4:	9e 0c       	add	r9, r14
    2fc6:	91 1a       	sub	r9, r17
    2fc8:	1e 2d       	mov	r17, r14
    2fca:	06 c0       	rjmp	.+12     	; 0x2fd8 <vfprintf+0x320>
    2fcc:	80 e2       	ldi	r24, 0x20	; 32
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	b3 01       	movw	r22, r6
    2fd2:	0e 94 4f 18 	call	0x309e	; 0x309e <fputc>
    2fd6:	1f 5f       	subi	r17, 0xFF	; 255
    2fd8:	1e 15       	cp	r17, r14
    2fda:	c0 f3       	brcs	.-16     	; 0x2fcc <vfprintf+0x314>
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <vfprintf+0x32e>
    2fde:	1e 15       	cp	r17, r14
    2fe0:	10 f4       	brcc	.+4      	; 0x2fe6 <vfprintf+0x32e>
    2fe2:	e1 1a       	sub	r14, r17
    2fe4:	01 c0       	rjmp	.+2      	; 0x2fe8 <vfprintf+0x330>
    2fe6:	ee 24       	eor	r14, r14
    2fe8:	04 ff       	sbrs	r16, 4
    2fea:	0f c0       	rjmp	.+30     	; 0x300a <vfprintf+0x352>
    2fec:	80 e3       	ldi	r24, 0x30	; 48
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	b3 01       	movw	r22, r6
    2ff2:	0e 94 4f 18 	call	0x309e	; 0x309e <fputc>
    2ff6:	02 ff       	sbrs	r16, 2
    2ff8:	1d c0       	rjmp	.+58     	; 0x3034 <vfprintf+0x37c>
    2ffa:	01 fd       	sbrc	r16, 1
    2ffc:	03 c0       	rjmp	.+6      	; 0x3004 <vfprintf+0x34c>
    2ffe:	88 e7       	ldi	r24, 0x78	; 120
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e c0       	rjmp	.+28     	; 0x3020 <vfprintf+0x368>
    3004:	88 e5       	ldi	r24, 0x58	; 88
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	0b c0       	rjmp	.+22     	; 0x3020 <vfprintf+0x368>
    300a:	80 2f       	mov	r24, r16
    300c:	86 78       	andi	r24, 0x86	; 134
    300e:	91 f0       	breq	.+36     	; 0x3034 <vfprintf+0x37c>
    3010:	01 ff       	sbrs	r16, 1
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <vfprintf+0x360>
    3014:	8b e2       	ldi	r24, 0x2B	; 43
    3016:	01 c0       	rjmp	.+2      	; 0x301a <vfprintf+0x362>
    3018:	80 e2       	ldi	r24, 0x20	; 32
    301a:	f7 fc       	sbrc	r15, 7
    301c:	8d e2       	ldi	r24, 0x2D	; 45
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	b3 01       	movw	r22, r6
    3022:	0e 94 4f 18 	call	0x309e	; 0x309e <fputc>
    3026:	06 c0       	rjmp	.+12     	; 0x3034 <vfprintf+0x37c>
    3028:	80 e3       	ldi	r24, 0x30	; 48
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	b3 01       	movw	r22, r6
    302e:	0e 94 4f 18 	call	0x309e	; 0x309e <fputc>
    3032:	9a 94       	dec	r9
    3034:	d9 14       	cp	r13, r9
    3036:	c0 f3       	brcs	.-16     	; 0x3028 <vfprintf+0x370>
    3038:	da 94       	dec	r13
    303a:	f1 01       	movw	r30, r2
    303c:	ed 0d       	add	r30, r13
    303e:	f1 1d       	adc	r31, r1
    3040:	80 81       	ld	r24, Z
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	b3 01       	movw	r22, r6
    3046:	0e 94 4f 18 	call	0x309e	; 0x309e <fputc>
    304a:	dd 20       	and	r13, r13
    304c:	a9 f7       	brne	.-22     	; 0x3038 <vfprintf+0x380>
    304e:	06 c0       	rjmp	.+12     	; 0x305c <vfprintf+0x3a4>
    3050:	80 e2       	ldi	r24, 0x20	; 32
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	b3 01       	movw	r22, r6
    3056:	0e 94 4f 18 	call	0x309e	; 0x309e <fputc>
    305a:	ea 94       	dec	r14
    305c:	ee 20       	and	r14, r14
    305e:	c1 f7       	brne	.-16     	; 0x3050 <vfprintf+0x398>
    3060:	43 ce       	rjmp	.-890    	; 0x2ce8 <vfprintf+0x30>
    3062:	f3 01       	movw	r30, r6
    3064:	66 81       	ldd	r22, Z+6	; 0x06
    3066:	77 81       	ldd	r23, Z+7	; 0x07
    3068:	cb 01       	movw	r24, r22
    306a:	2b 96       	adiw	r28, 0x0b	; 11
    306c:	e2 e1       	ldi	r30, 0x12	; 18
    306e:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__>

00003072 <strnlen_P>:
    3072:	fc 01       	movw	r30, r24
    3074:	05 90       	lpm	r0, Z+
    3076:	61 50       	subi	r22, 0x01	; 1
    3078:	70 40       	sbci	r23, 0x00	; 0
    307a:	01 10       	cpse	r0, r1
    307c:	d8 f7       	brcc	.-10     	; 0x3074 <strnlen_P+0x2>
    307e:	80 95       	com	r24
    3080:	90 95       	com	r25
    3082:	8e 0f       	add	r24, r30
    3084:	9f 1f       	adc	r25, r31
    3086:	08 95       	ret

00003088 <strnlen>:
    3088:	fc 01       	movw	r30, r24
    308a:	61 50       	subi	r22, 0x01	; 1
    308c:	70 40       	sbci	r23, 0x00	; 0
    308e:	01 90       	ld	r0, Z+
    3090:	01 10       	cpse	r0, r1
    3092:	d8 f7       	brcc	.-10     	; 0x308a <strnlen+0x2>
    3094:	80 95       	com	r24
    3096:	90 95       	com	r25
    3098:	8e 0f       	add	r24, r30
    309a:	9f 1f       	adc	r25, r31
    309c:	08 95       	ret

0000309e <fputc>:
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	8c 01       	movw	r16, r24
    30a8:	eb 01       	movw	r28, r22
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	81 ff       	sbrs	r24, 1
    30ae:	1b c0       	rjmp	.+54     	; 0x30e6 <fputc+0x48>
    30b0:	82 ff       	sbrs	r24, 2
    30b2:	0d c0       	rjmp	.+26     	; 0x30ce <fputc+0x30>
    30b4:	2e 81       	ldd	r18, Y+6	; 0x06
    30b6:	3f 81       	ldd	r19, Y+7	; 0x07
    30b8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ba:	9d 81       	ldd	r25, Y+5	; 0x05
    30bc:	28 17       	cp	r18, r24
    30be:	39 07       	cpc	r19, r25
    30c0:	64 f4       	brge	.+24     	; 0x30da <fputc+0x3c>
    30c2:	e8 81       	ld	r30, Y
    30c4:	f9 81       	ldd	r31, Y+1	; 0x01
    30c6:	01 93       	st	Z+, r16
    30c8:	f9 83       	std	Y+1, r31	; 0x01
    30ca:	e8 83       	st	Y, r30
    30cc:	06 c0       	rjmp	.+12     	; 0x30da <fputc+0x3c>
    30ce:	e8 85       	ldd	r30, Y+8	; 0x08
    30d0:	f9 85       	ldd	r31, Y+9	; 0x09
    30d2:	80 2f       	mov	r24, r16
    30d4:	09 95       	icall
    30d6:	89 2b       	or	r24, r25
    30d8:	31 f4       	brne	.+12     	; 0x30e6 <fputc+0x48>
    30da:	8e 81       	ldd	r24, Y+6	; 0x06
    30dc:	9f 81       	ldd	r25, Y+7	; 0x07
    30de:	01 96       	adiw	r24, 0x01	; 1
    30e0:	9f 83       	std	Y+7, r25	; 0x07
    30e2:	8e 83       	std	Y+6, r24	; 0x06
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <fputc+0x4c>
    30e6:	0f ef       	ldi	r16, 0xFF	; 255
    30e8:	1f ef       	ldi	r17, 0xFF	; 255
    30ea:	c8 01       	movw	r24, r16
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	1f 91       	pop	r17
    30f2:	0f 91       	pop	r16
    30f4:	08 95       	ret

000030f6 <__ultoa_invert>:
    30f6:	fa 01       	movw	r30, r20
    30f8:	aa 27       	eor	r26, r26
    30fa:	28 30       	cpi	r18, 0x08	; 8
    30fc:	51 f1       	breq	.+84     	; 0x3152 <__ultoa_invert+0x5c>
    30fe:	20 31       	cpi	r18, 0x10	; 16
    3100:	81 f1       	breq	.+96     	; 0x3162 <__ultoa_invert+0x6c>
    3102:	e8 94       	clt
    3104:	6f 93       	push	r22
    3106:	6e 7f       	andi	r22, 0xFE	; 254
    3108:	6e 5f       	subi	r22, 0xFE	; 254
    310a:	7f 4f       	sbci	r23, 0xFF	; 255
    310c:	8f 4f       	sbci	r24, 0xFF	; 255
    310e:	9f 4f       	sbci	r25, 0xFF	; 255
    3110:	af 4f       	sbci	r26, 0xFF	; 255
    3112:	b1 e0       	ldi	r27, 0x01	; 1
    3114:	3e d0       	rcall	.+124    	; 0x3192 <__ultoa_invert+0x9c>
    3116:	b4 e0       	ldi	r27, 0x04	; 4
    3118:	3c d0       	rcall	.+120    	; 0x3192 <__ultoa_invert+0x9c>
    311a:	67 0f       	add	r22, r23
    311c:	78 1f       	adc	r23, r24
    311e:	89 1f       	adc	r24, r25
    3120:	9a 1f       	adc	r25, r26
    3122:	a1 1d       	adc	r26, r1
    3124:	68 0f       	add	r22, r24
    3126:	79 1f       	adc	r23, r25
    3128:	8a 1f       	adc	r24, r26
    312a:	91 1d       	adc	r25, r1
    312c:	a1 1d       	adc	r26, r1
    312e:	6a 0f       	add	r22, r26
    3130:	71 1d       	adc	r23, r1
    3132:	81 1d       	adc	r24, r1
    3134:	91 1d       	adc	r25, r1
    3136:	a1 1d       	adc	r26, r1
    3138:	20 d0       	rcall	.+64     	; 0x317a <__ultoa_invert+0x84>
    313a:	09 f4       	brne	.+2      	; 0x313e <__ultoa_invert+0x48>
    313c:	68 94       	set
    313e:	3f 91       	pop	r19
    3140:	2a e0       	ldi	r18, 0x0A	; 10
    3142:	26 9f       	mul	r18, r22
    3144:	11 24       	eor	r1, r1
    3146:	30 19       	sub	r19, r0
    3148:	30 5d       	subi	r19, 0xD0	; 208
    314a:	31 93       	st	Z+, r19
    314c:	de f6       	brtc	.-74     	; 0x3104 <__ultoa_invert+0xe>
    314e:	cf 01       	movw	r24, r30
    3150:	08 95       	ret
    3152:	46 2f       	mov	r20, r22
    3154:	47 70       	andi	r20, 0x07	; 7
    3156:	40 5d       	subi	r20, 0xD0	; 208
    3158:	41 93       	st	Z+, r20
    315a:	b3 e0       	ldi	r27, 0x03	; 3
    315c:	0f d0       	rcall	.+30     	; 0x317c <__ultoa_invert+0x86>
    315e:	c9 f7       	brne	.-14     	; 0x3152 <__ultoa_invert+0x5c>
    3160:	f6 cf       	rjmp	.-20     	; 0x314e <__ultoa_invert+0x58>
    3162:	46 2f       	mov	r20, r22
    3164:	4f 70       	andi	r20, 0x0F	; 15
    3166:	40 5d       	subi	r20, 0xD0	; 208
    3168:	4a 33       	cpi	r20, 0x3A	; 58
    316a:	18 f0       	brcs	.+6      	; 0x3172 <__ultoa_invert+0x7c>
    316c:	49 5d       	subi	r20, 0xD9	; 217
    316e:	31 fd       	sbrc	r19, 1
    3170:	40 52       	subi	r20, 0x20	; 32
    3172:	41 93       	st	Z+, r20
    3174:	02 d0       	rcall	.+4      	; 0x317a <__ultoa_invert+0x84>
    3176:	a9 f7       	brne	.-22     	; 0x3162 <__ultoa_invert+0x6c>
    3178:	ea cf       	rjmp	.-44     	; 0x314e <__ultoa_invert+0x58>
    317a:	b4 e0       	ldi	r27, 0x04	; 4
    317c:	a6 95       	lsr	r26
    317e:	97 95       	ror	r25
    3180:	87 95       	ror	r24
    3182:	77 95       	ror	r23
    3184:	67 95       	ror	r22
    3186:	ba 95       	dec	r27
    3188:	c9 f7       	brne	.-14     	; 0x317c <__ultoa_invert+0x86>
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	61 05       	cpc	r22, r1
    318e:	71 05       	cpc	r23, r1
    3190:	08 95       	ret
    3192:	9b 01       	movw	r18, r22
    3194:	ac 01       	movw	r20, r24
    3196:	0a 2e       	mov	r0, r26
    3198:	06 94       	lsr	r0
    319a:	57 95       	ror	r21
    319c:	47 95       	ror	r20
    319e:	37 95       	ror	r19
    31a0:	27 95       	ror	r18
    31a2:	ba 95       	dec	r27
    31a4:	c9 f7       	brne	.-14     	; 0x3198 <__ultoa_invert+0xa2>
    31a6:	62 0f       	add	r22, r18
    31a8:	73 1f       	adc	r23, r19
    31aa:	84 1f       	adc	r24, r20
    31ac:	95 1f       	adc	r25, r21
    31ae:	a0 1d       	adc	r26, r0
    31b0:	08 95       	ret

000031b2 <_exit>:
    31b2:	f8 94       	cli

000031b4 <__stop_program>:
    31b4:	ff cf       	rjmp	.-2      	; 0x31b4 <__stop_program>
